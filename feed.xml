<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-05T19:58:46+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dev Koala</title><entry><title type="html">How to Make a New Jekyll Website from Scratch</title><link href="http://localhost:4000/2024/how-to-make-a-new-jekyll-website-from-scratch.html" rel="alternate" type="text/html" title="How to Make a New Jekyll Website from Scratch" /><published>2024-07-02T19:55:34+02:00</published><updated>2024-07-02T19:55:34+02:00</updated><id>http://localhost:4000/2024/how-to-make-a-new-jekyll-website-from-scratch</id><content type="html" xml:base="http://localhost:4000/2024/how-to-make-a-new-jekyll-website-from-scratch.html"><![CDATA[<h1 id="how-to-make-a-new-jekyll-website-from-scratch">How to Make a New Jekyll Website from Scratch</h1>

<div class="intro">
Curious about how to build a website from scratch with a static site generator? In this comprehensive guide, we'll dive into the world of Jekyll, a popular static website generator, and walk you through every step of creating your own Jekyll project. We'll explore Jekyll's evolution, compare it to alternatives, and cover everything from installation to configuration. You'll learn how to set up essential files, understand the intricacies of Front Matter, configure your Gemfile, and organize your project directory. Plus, we'll guide you through the process of creating new posts, uploading your site to GitHub, and using Kramdown notation to enhance your content. Get ready to master Jekyll and bring your static site to life!
</div>

<p>In 2001, Ben and Mena Trott from San Francisco changed the world (or at least the World Wide Web) by introducing a tool called <strong>Movable Type</strong>.</p>

<p>The idea was to use database content to automatically generate a website. When the data changed, the website could be automatically re-generated with the new content.</p>

<p>This gave birth to <em>static website generators</em>.</p>

<p>Fast forward to 2008, another tool called <strong>Jekyll</strong> was created. Instead of attempting to be a full-blown Content Management System like Movable Type, it aimed to be a simple, easy-to-use, and fast static website generator. No database was needed, generation performance was lightning fast in comparison, and it was 100% open source.</p>

<p>The tool quickly gained popularity among developers and tech-savvy bloggers. Its simplicity and GitHub Pages integration made it perfect for personal blogs and project documentation. Writing in Markdown and using Liquid for templating appealed to those valuing both simplicity and control.</p>

<p>As Jekyll grew, it fostered a vibrant ecosystem of themes and plugins. The community expanded, contributing to its functionality. This growth aligned with a broader trend towards static site generators, with Jekyll often seen as a pioneer.</p>

<h2 id="why-jekyll">Why Jekyll?</h2>

<p>Since its inception, many others have joined the party, and in 2024 we are looking at literally hundreds of SWGs. In specific areas, many beat Jekyll:</p>

<ul>
  <li><strong>Hugo:</strong> Much faster, able to generate websites in a fraction of the time it takes Jekyll, making it very useful for an extremely large volume of content that changes often.</li>
  <li><strong>Hexo:</strong> Offers one-command deployment to various platforms like GitHub Pages, Heroku, and more, streamlining the process compared to Jekyll’s more manual deployment approach.</li>
  <li><strong>Gatsby:</strong> Leverages React and GraphQL, making it ideal for developers who are familiar with these technologies. It excels at creating complex, dynamic-feeling static sites with seamless integration of the React ecosystem.</li>
</ul>

<p>But unless one heavily relies on a particular area, selecting any mature product is likely good enough. For quite a while, Jekyll has been a complete product. With so many years under its belt, it is more mature and fleshed out than almost any other SWG on the market.</p>

<p>Its code on GitHub is updated almost daily. Twelve years in the making, and it is still vibrantly developed and continuously improving.</p>

<h2 id="installing-jekyll">Installing Jekyll</h2>

<p>The official Jekyll website has an excellent installation guide for multiple operating systems. <a href="https://jekyllrb.com/docs/installation/" target="_blank">Here is a link</a> to their installation docs. Return once Ruby and Jekyll are installed.</p>

<h2 id="creating-a-blank-jekyll-project">Creating a blank Jekyll project</h2>

<p><img src="http://localhost:4000/assets/img/articles/how-to-make-a-new-jekyll-website-from-scratch/blank-jekyll-project.png" alt="Blank Jekyll project" /></p>

<p>What the official Jekyll website doesn’t cover at the time of writing this article is how to create an empty Jekyll project.</p>

<p>When Jekyll generates a new website, it automatically adds a theme called <em>Minima</em>. This creates some unnecessary content that is good for newbies, but it forces the user to remove all that content while adding own custom content.</p>

<p>To create an “empty” Jekyll project, we need to add a <em>’–blank’</em> flag.</p>

<p>Open a terminal, navigate to the directory where you want your new Jekyll project to be stored, and write:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">jekyll new <span class="nt">--blank</span> my-site-name</code></pre></figure>

<p>…where <em>my-site-name</em> is the name you want to give to your project.</p>

<p>The minimal (Minima-less) installation creates the critical directory structure, and the entire project takes less than 1KB of hard disk space.</p>

<h2 id="editing-config-file">Editing config file</h2>

<p>Let’s start with the most important file in the whole project - _config.yml. It is always present in your main directory. Let’s open it up and edit some things.</p>

<p>Initially, only the first three positions listed below will be present, but we will be adding plenty more.</p>

<ul>
  <li><strong>url:</strong> Insert the full domain name with the extension, for example, <em>mynewstore.com</em>.</li>
  <li><strong>baseurl:</strong> Only change this when you are not the domain owner and your website will be deeper in the directory structure. For example, if your university at <em>https://www.university.edu</em> hosts student websites at <em>https://www.university.edu/~username/blog</em>, the url setting should be <em>https://www.university.edu</em> and the baseurl setting should be <em>/~username/blog</em>.</li>
  <li><strong>title:</strong> Name of your website.</li>
  <li><strong>markdown: kramdown:</strong> Since Jekyll 3.0, Kramdown is the default markup language. Specifying it is not needed, but it can serve as a reference if you want to check the Markdown syntax but forgot which Markdown version is in use.</li>
  <li><strong>highlighter: rouge:</strong> If you intend to have programming code examples in your articles, Jekyll has a highlighter plugin that colors your code, making it considerably easier to read.</li>
  <li><strong>permalink: /:categories/:year/:month/:day/:title:output_ext:</strong> Default address structure of all articles on your website. A newly created article named <em>‘My new article’</em> written on 2024.07.02 under a <em>‘Travel’</em> category will end up with a URL address similar to: <em>https://www.mydomain.com/travel/2024/07/02/my-new-article</em>. You can modify placeholders to your liking or remove them entirely. Always remember to separate them with ‘/’.</li>
  <li><strong>plugins:</strong> There are many Jekyll plugins. Two interesting ones are jekyll-feed and jekyll-paginate-v2. jekyll-feed automatically generates an XML file containing the entire structure of your website, making your website ready for RSS readers. jekyll-paginate organizes your articles so that they are displayed on multiple pages, for example, 10 articles per page, instead of all being displayed on one page. Installation and configuration of both are simple—just ask Chat GPT!</li>
</ul>

<h2 id="creating-necessary-html-files">Creating necessary HTML files</h2>

<p>Three types of HTML files are on almost any website out there: <em>index</em>, <em>404</em>, and <em>about</em>. You need the first two; the third one you don’t, but you should still have.</p>

<p>By default, Jekyll only creates an <em>index.md</em> file in the main project folder. I recommend deleting it and creating <em>index.html</em> instead, along with <em>404.html</em> and <em>about.html</em>.</p>

<h2 id="front-matter">Front Matter</h2>

<p><img src="http://localhost:4000/assets/img/articles/how-to-make-a-new-jekyll-website-from-scratch/front-matter.png" alt="Front Matter example" /></p>

<p>Jekyll uses something called Front Matter, which is expected at the beginning of every HTML and Markdown file in your project.</p>

<p>Front Matter provides basic information about the content inside the file, so it can later be generated into a website according to the proper design layout, placed in the correct category, have the correct URL address, etc.</p>

<p>Front Matter must be positioned at the top of the file. Its initial and final lines only contain <em>’—‘</em>, and in between are lines containing different variables and their values, one variable per line.</p>

<p>Below are the ten most useful Front Matter variables. Make sure to include title and layout in every Front Matter section! These are critical as every website needs a title and a layout for generating the content.</p>

<p>For blog posts, date, author, and at least one of the tags variables should also be present.</p>

<ul>
  <li><strong>title: “My First Blog Post”:</strong> Page title.</li>
  <li><strong>date: 2024-07-02 14:30:00 -0200:</strong> Last piece of data is your timezone.</li>
  <li><strong>categories: [web development, jekyll]:</strong> As many categories as you like. Remember to keep them inside square brackets.</li>
  <li><strong>tags: [tutorial, beginner]:</strong> Same format as categories.</li>
  <li><strong>layout: page/post/something else:</strong> Every markdown page is dressed in HTML according to the layout specified. More details later.</li>
  <li><strong>author:</strong> Mostly used in blog posts.</li>
  <li><strong>description:</strong> What is this page’s content about?</li>
  <li><strong>permalink:</strong> If you specify it, the default permalink gets replaced.</li>
  <li><strong>published: False:</strong> If false is specified, the document will not be part of the generated website. Useful when you need to temporarily remove the document from your website, such as an article containing statements needing updating.</li>
  <li><strong>custom variables:</strong> You can create your own variables to be used in multiple ways. For example, you could specify reading_time: 5 and then in the layout file include &lt;p&gt;Reading time:  minutes&lt;/p&gt; to automatically insert the specified time.</li>
</ul>

<h2 id="gemfile">Gemfile</h2>

<p>A Gemfile is a file used by Ruby (and thus Jekyll) to manage dependencies. It lists the gems (Ruby libraries) your project needs.</p>

<p>When creating a Jekyll website with the <em>’–blank’</em> flag, the file is not created. Create a file named Gemfile (no extension) in your Jekyll project’s root directory and open it for editing. Add the following lines:</p>

<ul>
  <li><strong>source “https://rubygems.org”:</strong> This line specifies where Ruby should look for gems. RubyGems.org is the default and most common source.</li>
  <li><strong>gem “jekyll”:</strong> This line tells Bundler to include the Jekyll gem in your project.</li>
  <li><strong>gem “jekyll”, “~&gt; 4.0”:</strong> An alternative version of the line above. It means: compatible with 4.0 but newer versions. This specification is called a pessimistic version constraint and serves to protect our project against compatibility issues that updating to newer versions of Jekyll might generate.</li>
</ul>

<p>All other plugins need to be included in the file as well, one per line, using the same format, i.e., <em>‘gem “plugin-name”‘</em>.</p>

<h2 id="other-files-in-main-directory">Other files in main directory</h2>

<p>There can be multiple other types of files in the main project directory. Some examples:</p>

<ul>
  <li><strong>favicon-16x16.png</strong>, <strong>favicon-32x32.png:</strong> Two most basic favicon types of files, best to reside in the main directory.</li>
  <li><strong>CNAME:</strong> If the website is on a custom domain, a CNAME file containing the domain address needs to be put in the main folder; otherwise, the custom domain won’t work.</li>
  <li><strong>.gitignore:</strong> In case the main project folder is being put on GitHub (as opposed to just the generated final page content), the .gitignore file specifies cache and other folders that should not be pushed and synced.</li>
  <li><strong>README.md:</strong> A markdown file providing information about the project, often displayed on GitHub.</li>
  <li><strong>LICENSE:</strong> A file detailing the license under which the project is distributed.</li>
  <li><strong>.editorconfig:</strong> Helps maintain consistent coding styles across different editors and IDEs.</li>
  <li><strong>package.json:</strong> Used if the project incorporates npm packages or scripts, often for asset processing.</li>
  <li><strong>.travis.yml</strong> or <strong>.github/workflows/ci.yml:</strong> Configuration files for continuous integration services like Travis CI or GitHub Actions.</li>
</ul>

<h2 id="folders">Folders</h2>

<p>One of the biggest advantages of Jekyll is its simplicity. It’s very easy to learn, as evidenced by the fact that almost everything can be contained in one mid-length article that you are reading right now.</p>

<p>To work efficiently in Jekyll, it’s best to learn and remember the different types of folders early. Luckily, it’s just one minute of effort.</p>

<ul>
  <li><strong>_posts/:</strong> Contains your blog posts.</li>
  <li><strong>_pages/:</strong> Holds static pages, ie. complete html documents that don’t need to be generated each time. Some projects use a dedicated <em>_pages</em> folder, while others place pages directly in the root. In general, if there are only few HTML documents (like earlier mentioned: <em>index.html</em>, <em>about.html</em>, <em>404.html</em>) and main project folder is not crowded, there’s no need to create an extra folder.</li>
  <li><strong>_layouts/:</strong> Contains templates that wrap around your content. These define the overall structure of different types of pages.</li>
  <li><strong>_includes/:</strong> Stores reusable content snippets that can be included in layouts, pages, or posts.</li>
  <li><strong>_data/:</strong> YAML, JSON, or CSV files containing data that can be accessed via the site.data variable in templates.</li>
  <li><strong>_sass/:</strong> Contains partial Sass files that can be imported into your main CSS file.</li>
  <li><strong>assets/</strong> or <strong>_assets/:</strong> Stores static files like images, CSS files, and JavaScript files.</li>
  <li><strong>_site/:</strong> The generated site directory (usually ignored in version control). This is where Jekyll outputs the final, static website. It is also where you want to initiate a git repository if you are using Github Pages to host your website.</li>
  <li><strong>_drafts/:</strong> A place for unpublished posts. These won’t appear on the live site unless Jekyll is run with the <em>’–drafts’</em> switch.</li>
  <li><strong>_plugins/</strong> or <strong>_extensions/:</strong> Contains custom Ruby plugins to extend Jekyll’s functionality.</li>
  <li><strong>collections/ or custom collection folders:</strong> Holds files for custom collections, which are similar to posts but can be organized differently.</li>
</ul>

<p>Following are extended descriptions of some of the folders above, describing what kind of work has to be done in which folders in the process of creating, maintaining, and updating a Jekyll website.</p>

<h2 id="_posts">_posts</h2>

<p>The _posts folder is a cornerstone of Jekyll’s blogging functionality. It serves as the primary location for storing blog post content in a Jekyll site. This folder is created by default when you initialize a new Jekyll project.</p>

<p>Within the _posts folder, individual blog posts are stored as separate files. These files follow a specific naming convention: <em>YYYY-MM-DD-title.md</em> (or .markdown). For example, <em>‘2023-07-02-welcome-to-jekyll.md’</em>. This naming structure is crucial as Jekyll uses it to extract the publication date and create the post’s URL.</p>

<p>Each post file in the _posts folder typically begins with YAML front matter, enclosed between triple-dashed lines. This front matter contains metadata about the post, such as the title, date, categories, tags, and any custom variables you define. The content following the front matter is the main body of your blog post, usually written in Markdown.</p>

<p>Jekyll processes these files, converting the Markdown to HTML and applying the appropriate layout as specified in the front matter or your configuration. The resulting HTML files are then placed in the appropriate location within your generated site, typically under a <em>/blog/</em> or <em>/posts/</em> directory, depending on your permalink settings.</p>

<p>The _posts folder is dynamic, meaning you can continually add new post files, and Jekyll will automatically include them in your site when you build it using jekyll build or jekyll serve commands. This makes it easy to maintain and grow your blog over time, simply by adding new files to this folder.</p>

<h2 id="_layouts">_layouts</h2>

<p>The _layouts folder is a crucial component of Jekyll’s theming system. It contains template files that define the structure and appearance of different types of pages on your site. These templates act as the skeleton for your content, providing consistent styling and structure across your site.</p>

<p>Layout files are typically HTML documents with Liquid tags and variables. They include placeholders for content, which Jekyll fills in when generating your site. The most common layout is default.html, which often serves as the base template for other layouts.</p>

<p>Other common layouts might include post.html for blog posts, page.html for static pages, and home.html for the homepage. You can create as many custom layouts as you need for different types of content or sections of your site.</p>

<p>In your content files (posts, pages, etc.), you specify which layout to use in the front matter. For example, <em>‘layout: post’</em> tells Jekyll to wrap that content in the <em>post.html</em> layout. If no layout is specified, Jekyll defaults to <em>default.html</em>.</p>

<p>Layouts can be nested. For instance, a <em>post.html</em> layout might include the content within a <em>default.html</em> layout, adding post-specific elements like author information or publication date. This nesting allows for modularity and reuse of common elements across different page types.</p>

<p>The _layouts folder gives you fine-grained control over your site’s structure and appearance. By editing these files, you can make site-wide changes efficiently, ensure consistency across pages, and create a unique look for your Jekyll site without repeating HTML structure in every content file.</p>

<h2 id="_includes">_includes</h2>

<p>The _includes folder in Jekyll is designed to store reusable content snippets. These snippets can be HTML, Markdown, or Liquid code that you want to use across multiple pages or layouts in your site. This folder helps in keeping your code DRY (Don’t Repeat Yourself) and makes maintenance easier.</p>

<p>Common uses for includes are elements like headers, footers, navigation menus, sidebar content, or any other repetitive parts of your site. By storing these elements in separate files within the _includes folder, you can easily update them in one place and have the changes reflect across your entire site.</p>

<p>To use an include in your layouts, pages, or posts, you simply use the Liquid tag <em>’{% include file.html %}’</em>. Jekyll will then insert the contents of the specified file from the _includes folder at that point in your document. You can also pass parameters to includes, allowing for more dynamic and flexible use of these snippets.</p>

<p>The _includes folder is particularly useful for creating modular designs. It allows you to break down your site into smaller, manageable pieces, making it easier to update and maintain. This modularity also facilitates collaboration on larger projects, as different team members can work on different components without conflicting with each other’s work.</p>

<h2 id="_assets">_assets</h2>

<p>The _assets folder (or sometimes simply assets) is a common directory in Jekyll projects used to store static files that are part of your website. While not a default Jekyll folder, it’s widely adopted by developers as a best practice for organizing non-content files.</p>

<p>This folder typically contains subdirectories for different types of assets. Common subdirectories include images for storing graphics and photos, css for stylesheets, js for JavaScript files, and fonts for custom web fonts. This organization helps keep your project structure clean and logical.</p>

<p>Unlike content in folders like _posts or _pages, files in the _assets folder are not processed by Jekyll’s templating system. They are typically copied as-is to the _site folder when your site is built. However, many Jekyll setups use additional plugins or build processes to optimize these assets, such as minifying CSS and JavaScript or compressing images.</p>

<p>To reference files from the _assets folder in your layouts, includes, or content, you’ll typically use Jekyll’s <em>‘site.baseurl’</em> variable combined with the file path. This ensures that your assets are correctly linked regardless of where your site is deployed.</p>

<p>It’s worth noting that while _assets (with an underscore) is commonly used, some developers prefer assets without the underscore. The underscore version isn’t processed by Jekyll, which can be useful for certain setups, while the non-underscore version allows for easier direct linking in some deployment scenarios. The choice often depends on your specific needs and workflow.</p>

<h2 id="blog-update-routine">Blog update routine</h2>

<p>Working with Jekyll daily typically involves writing new articles and updating the website with those articles. Assuming <em>_config.yml</em>, <em>Gemfile</em>, and other necessary files are already created and configured, the update cycle generally follows these steps:</p>

<ol>
  <li><strong>Create a new post:</strong>
    <ul>
      <li>Navigate to your project’s <em>_posts</em> folder.</li>
      <li>Create a new file using the format <em>YYYY-MM-DD-article-title.md</em>. For example, <em>2024-07-02-My-First-Article.md</em>.</li>
    </ul>
  </li>
  <li><strong>Write the article:</strong>
    <ul>
      <li>Start the file with Front Matter. Begin and end the Front Matter with three dashes (<em>’—‘</em>), and specify metadata like title, date, categories, and tags.</li>
      <li>Write the main content of your article in Markdown.</li>
    </ul>
  </li>
  <li><strong>Preview locally:</strong>
    <ul>
      <li>Open a terminal, navigate to your Jekyll project directory, and run <em>‘jekyll serve’</em>.</li>
      <li>Jekyll will build your site and serve it locally at <em>‘http://127.0.0.1:4000’</em>.</li>
      <li>Open this address in your web browser to preview your changes in real-time as you write.</li>
    </ul>
  </li>
  <li><strong>Finalize the Article:</strong>
    <ul>
      <li>Insert images, format text (using bold, italic, etc.), and structure your paragraphs.</li>
      <li>Once satisfied, stop the local server by pressing <em>‘Ctrl+C’</em> twice in the terminal.</li>
    </ul>
  </li>
</ol>

<p>Congratulations, your website is ready for upload!</p>

<h2 id="uploading-to-github">Uploading to Github</h2>

<p>Github is very generous to static website owners, allowing them to upload websites for free with no catch to its Github Pages, so long as each website does not exceed 1GB in total size and there are no files larger than 100MB.</p>

<p>It is generally recommended to sign up to Github Pages instead of uploading a static website to a custom ftp server. Such server will be paid, almost guaranteed to perform worse than Github Pages and will have worse uptime.</p>

<p>Here is how to do this:</p>

<ul>
  <li>
    <p>Download Git for Windows from <a href="https://git-scm.com/download/win" target="_blank">official website</a></p>
  </li>
  <li>
    <p>Open a new terminal window and input these commands:</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git config <span class="nt">--global</span> user.name <span class="s2">"Your Name"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your.email@example.com"</span></code></pre></figure>

<ul>
  <li>
    <p>Navigate in terminal to your Jekyll project.</p>
  </li>
  <li>
    <p>Initialize git repository with git init. Initializing is creating a git repository, you only have to do it once.</p>
  </li>
  <li>
    <p>Write these commands. In second command, replace content in quotes with easy to understand and short description of what this particular update brings to your website.</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span></code></pre></figure>

<ul>
  <li>Set up SSH for passwordless authentication:
    <ul>
      <li>Generate an SSH key: ssh-keygen -t rsa -b 4096 -C “your.email@example.com”</li>
      <li>Start the ssh-agent: eval $(ssh-agent -s)</li>
      <li>Add your SSH key to the agent: ssh-add ~/.ssh/id_rsa</li>
    </ul>
  </li>
  <li>Add your SSH key to GitHub:
    <ul>
      <li>Copy your public key to clipboard: clip &lt; ~/.ssh/id_rsa.pub</li>
      <li>Go to GitHub.com and log in</li>
      <li>Click your profile photo &gt; Settings &gt; SSH and GPG keys</li>
      <li>Click “New SSH key”</li>
      <li>Give it a title and paste your key into the “Key” field</li>
      <li>Click “Add SSH key”</li>
    </ul>
  </li>
  <li>Connect your local repository to GitHub:
    <ul>
      <li>Create a new repository on GitHub (without initializing with README)</li>
      <li>In Git Bash, add the remote repository: git remote add origin git@github.com:username/repository.git</li>
      <li>Push your code to GitHub: git push -u origin master</li>
    </ul>
  </li>
</ul>

<p>Now you should be able to push and pull from your GitHub repository without entering a password each time.</p>

<p>Steps 6-8 are needed to perform just once. From now on, after you finish writing an article and quit Jekyll, routing uploading to Github Pages requires only 3 commands:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Your commit message"</span>
git push</code></pre></figure>

<h2 id="useful-kramdown-notation">Useful Kramdown notation</h2>

<p>Kramdown, a Markdown parser used in Jekyll, provides a simple way to format your articles. Here are some commonly used Kramdown notations:</p>

<ul>
  <li><strong>#</strong>, <strong>##</strong>, <strong>###</strong>: Create headers of decreasing size. More # symbols mean smaller headers (# is H1, ## is H2 etc.)</li>
  <li><strong>*</strong> , <strong>_</strong> , <strong>**</strong>: Create emphasis. Single * or _ for italics, double ** or __ for bold.</li>
  <li><strong>-</strong> , <strong>+</strong> , <strong>*</strong>: Start unordered list items. Numbers followed by periods (1., 2., etc.) start ordered lists.</li>
  <li><strong>[]</strong>: Enclose link text. <strong>()</strong> immediately after contains the URL.</li>
  <li><strong>{:target=”_blank”}</strong> at the end of a link opens it in new tab</li>
  <li><strong>!</strong>: Placed before [] to indicate an image. [] contains alt text, () contains image URL.</li>
  <li><strong>—</strong>, <strong>***</strong>, ___: Any of these on a line by themselves creates a horizontal rule. Exceptions are Front Matter borders whichh will not produce html objects.</li>
  <li><strong>:</strong> : Separates a term from its definition in definition lists.</li>
</ul>

<h2 id="final-word">Final word</h2>

<p>Jekyll is a powerful yet straightforward tool that allows developers to create static websites with ease. Its structured folder system, which includes _posts, _layouts, _includes, and _assets, facilitates organized content management and site customization. By leveraging Markdown for content creation, Jekyll simplifies the writing process, enabling users to focus on their message rather than the intricacies of HTML.</p>

<p>The ability to seamlessly update and preview changes locally, combined with the straightforward process of deploying updates to GitHub Pages, ensures that maintaining and growing your website is a smooth and efficient experience. By adhering to best practices and utilizing tools like Git and Kramdown, developers can ensure their sites are not only visually appealing but also robust and maintainable.</p>

<p>Whether you are a seasoned developer or a newcomer to web development, Jekyll offers a streamlined path to building and managing a successful static website. Its user-friendly approach and powerful features make it an excellent choice for anyone looking to create a well-organized, professional web presence.</p>]]></content><author><name>Chris</name></author><category term="jekyll" /><summary type="html"><![CDATA[How to Make a New Jekyll Website from Scratch]]></summary></entry><entry><title type="html">Writing a local Windows audio scrobbler</title><link href="http://localhost:4000/2024/writing-a-local-windows-audio-scrobbler.html" rel="alternate" type="text/html" title="Writing a local Windows audio scrobbler" /><published>2024-02-15T14:13:00+01:00</published><updated>2024-02-15T14:13:00+01:00</updated><id>http://localhost:4000/2024/writing-a-local-windows-audio-scrobbler</id><content type="html" xml:base="http://localhost:4000/2024/writing-a-local-windows-audio-scrobbler.html"><![CDATA[<h1 id="writing-a-local-windows-audio-scrobbler">Writing a local Windows audio scrobbler</h1>

<div class="intro">
In an era dominated by streaming services like Spotify, maintaining a local MP3 collection might seem outdated. However, for those who prefer the control and offline access it offers, local scrobbling is invaluable. This guide teaches you how to create a local audio scrobbler for Windows using Python and foobar2000. By capturing and logging playback data, you maintain complete control without relying on services like Last.fm. We’ll cover setting up your environment, configuring foobar2000, and writing the scrobbling script, providing a detailed yet straightforward path to enhance your music listening experience.
</div>

<p>The practice of listening to MP3 files and maintaining an MP3 collection is certainly a thing of the past now. In fact, if we asked a few tech-savvy teenagers what an MP3 file is, some wouldn’t even know.</p>

<p>Services such as Spotify and Tidal have replaced manually searching for, downloading, and cataloguing music, much like Netflix and Disney+ have obliterated the pay-per-view and rental VOD market.</p>

<p>As with every technology out there, there are a few dinosaurs who refuse to give up old habits for various reasons, the author of this blog being one of them.</p>

<p>Having a private collection of files offers the same benefits as general local storage offers over cloud solutions: instant direct access, ability to edit and cut out content with ease, no need for an internet connection, and more.</p>

<p>Local scrobbling perfectly compliments local playback. Last.fm, Libre.fm, and the like are nice while they last, but they are not profitable and therefore can be discontinued any day.</p>

<p>By writing a local scrobbling application, we have full control over which tag fields are logged and how the file looks. It can then be backed up with ease.</p>

<p>In this article, we’re going to write a scrobbling application using Python for the Windows operating system. It will run continuously while we are logged in. It will listen to changes in Foobar playback and log those changes to a file according to our specified logic.</p>

<p>A few years ago, I wrote another article that does the same thing for graphical Linux, using the DeaDBeeF player and written in Bash. If you need a Linux version, <a href="https://devkoala.com/2020/writing-a-local-audio-scrobbling-script-in-bash.html">here</a> is a link to the article.</p>

<h2 id="requirements">Requirements</h2>

<ol>
  <li><strong>Python</strong>. Python. This ever-popular programming language is a first choice when it comes to many tasks. Due to its simplicity and readability, it is certainly a joy to write in compared to most other languages.</li>
</ol>

<p>Download the latest Python version from the official Python website <a href="https://www.python.org/downloads/">here</a>.</p>

<ol>
  <li><strong>foobar 2000</strong>. One of the easiest ways to make a local audio scrobbling script is to monitor an audio player’s title string, extract data from it, manipulate it, and store it in a file. There aren’t that many MP3 players for Windows, let alone ones that allow us to manipulate their title. Of the very few, foobar2000 is the best, so it is our choice.</li>
</ol>

<p><a href="https://www.foobar2000.org/download">Here</a> is a link to the download section of the official foobar2000 website.</p>

<h2 id="configuring-foobar-2000">Configuring Foobar 2000</h2>

<p><img src="http://localhost:4000/assets/img/articles/writing-a-local-windows-audio-scrobbler/foobar2000-options.png" alt="Foobar setting location" /></p>

<p>The version I am using as of the time of writing this article is 2.1.4.</p>

<p>Go to <em>Preferences</em> by either pressing <em>Ctrl+p</em> or through <em>File -&gt; Preferences</em>. In the left menu tree select <em>Display</em>, then select <em>Default User Interface</em> under it.</p>

<p>In the <em>Playback state display formatting</em> section, you need to edit the <em>Window title</em> field. Replace whatever you find there with:</p>
<blockquote>
  <p><em>%artist% -.- %album% -.- %title% -.- %date% -.- %length% -.- %playback_time%</em></p>
</blockquote>

<p>As you can see, foobar2000 has many different tags encapsulated between percentage signs. Putting ‘ -.- ‘ is our choice. A distinct combination of strings has to be used so that the script can later extract data between them. Using the selected solution generally guarantees this. There is a very low chance that this particular string is going to appear in artist, album, or title tags.</p>

<p>On the other hand, it doesn’t look horrible (although it’s certainly not pretty), which is also important because if our Windows taskbar is configured to show icons and program titles instead of just icons, we are going to be looking at it every time the artist tag field of the currently played song in foobar2000 is short enough.</p>

<h2 id="breaking-apart-the-script">Breaking apart the script</h2>

<p>Let’s get down to it.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pygetwindow</span> <span class="k">as</span> <span class="n">gw</span><span class="p">,</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">time</span> <span class="kn">import</span> <span class="n">sleep</span></code></pre></figure>

<p>The imports section is quite straightforward, befitting a miniscule script.</p>

<p><a href="https://pypi.org/project/PyGetWindow/">PyGetWindow</a> is the only module which is not built-in. Thanks to it, we get access to titles of all programs that are currently running. Download it from the command line with this command:</p>

<blockquote>
  <p>pip install pygetwindow</p>
</blockquote>

<p>Next, we define 3 functions to aid us in the audio scrobbling process:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_window_title_contains</span><span class="p">(</span><span class="n">partial_title</span><span class="p">):</span>
	<span class="n">windows</span> <span class="o">=</span> <span class="n">gw</span><span class="p">.</span><span class="nf">getAllTitles</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">windows</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">partial_title</span> <span class="ow">in</span> <span class="n">title</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
			<span class="k">return</span> <span class="n">title</span></code></pre></figure>

<p>foobar2000 adds the string <em>’ [foobar2000]’</em> at the end of the program title, and it’s non-negotiable. Therefore, we have a convenient string to search for in order to isolate foobar2000 from other applications and get the playback data.</p>

<p>This function uses PyGetWindow to iterate through all the currently opened window titles and give us foobar2000.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">convert_minsec_to_sec</span><span class="p">(</span><span class="n">minsec</span><span class="p">):</span>
	<span class="n">seconds</span> <span class="o">=</span> <span class="n">minsec</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>
	<span class="n">minutes</span> <span class="o">=</span> <span class="n">minsec</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
	<span class="n">seconds</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">seconds</span><span class="p">)</span>
	<span class="n">minutes</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">minutes</span><span class="p">)</span>
	<span class="n">seconds_full</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="n">minutes</span> <span class="o">+</span> <span class="n">seconds</span>
	<span class="k">return</span> <span class="n">seconds_full</span></code></pre></figure>

<p>In the script, playback time is important because we’re going to be constantly comparing the previously stored time with the current one in order to detect if the track has changed. To effectively do this comparison, it’s easiest to convert minutes to seconds by multiplying the value representing minutes by 60 and adding it to the value representing seconds.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">foobar_title_to_csv_stripe</span><span class="p">(</span><span class="n">foobar_title</span><span class="p">):</span>
	<span class="n">csv_ready</span> <span class="o">=</span> <span class="n">foobar_title</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s"> -.- </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">;</span><span class="sh">'</span><span class="p">)</span>
	<span class="n">current_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
	<span class="n">formatted_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%Y.%m.%d;%H:%M;</span><span class="sh">'</span><span class="p">)</span>
	<span class="n">stripe_pre</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">formatted_time</span><span class="si">}{</span><span class="n">csv_ready</span><span class="si">}</span><span class="sh">'</span><span class="p">[:</span><span class="o">-</span><span class="mi">14</span><span class="p">]</span>
	<span class="n">unwanted_string_tail</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">;\d?\d:\d\d$</span><span class="sh">"</span><span class="p">,</span> <span class="n">stripe_pre</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">stripe</span> <span class="o">=</span> <span class="n">stripe_pre</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">unwanted_string_tail</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">stripe</span></code></pre></figure>

<p>Once we get our title, there are a few things that need to be done with it:</p>

<p>First, our <em>’ -.- ‘</em> separator needs to be replaced with the CSV separator needed for the scrobbling file. <em>’;’</em> is a considerably safer choice than a comma, because commas are very frequent in tags while semicolons are not.</p>

<p>Next, there needs to be a timestamp at the beginning of each scrobble to indicate when that scrobble took place. Python’s datetime module provides a simple solution for this.</p>

<p>After we get the datetime object, we format it according to a practical specification. Year is followed by month, which is then followed by day, then after a semicolon we get the current hour and minute of the day. A semicolon at the end prepares the string for the actual tag stripe.</p>

<p>Finally, we add the timestamp to the tag content, remove unnecessary stuff from the end of the string, and return the complete scrobble line.</p>

<p>After defining functions, we form starting variables:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">csv_file_location</span> 	<span class="o">=</span> <span class="sh">'</span><span class="s">d:/doc/scrobbles/2024.csv</span><span class="sh">'</span>
<span class="n">time_played_current</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">time_played_past</span> 	<span class="o">=</span> <span class="mi">9999</span></code></pre></figure>

<p><em>csv_file_location</em> needs to be set to a path on your drive where the scrobbling file is to be stored.</p>

<p>Setting up <em>time_played_past</em> and <em>time_played_current</em> is just priming the pump before the action starts. In other words, we set up initial values for the script to have something to work with.</p>

<p><em>time_played_past</em> is needed once when the script initiates. For playback logging to be registered, the variable stores 9999 “seconds” so when we begin playback, <em>time_played_current</em> has a lower number. This means a track has been changed - if the same track were still playing, that number would go up, not down.</p>

<p>The number going down indicates changing of the track or restarting the currently played track. One way or another, it is a sign to add that new item to our scrobble history.</p>

<p>We use <em>while True:</em> for the contained code to run infinitely. We want the script to be always on and always listening for new playback changes.</p>

<p>Because the code is simple and extremely lightweight, it doesn’t slow down the system by any noticeable amount. In fact, it probably wouldn’t even if we were running it 500 times in parallel.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">foobar_title</span> <span class="o">=</span> <span class="nf">get_window_title_contains</span><span class="p">(</span><span class="sh">'</span><span class="s"> [foobar2000]</span><span class="sh">'</span><span class="p">)</span>

<span class="k">if</span> <span class="n">foobar_title</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">-.-</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">foobar_title</span><span class="p">:</span></code></pre></figure>

<p>The script begins to move by checking if among all currently opened windows there is one whose title contains the string representing foobar2000.</p>

<p>Just to make sure that we don’t have accidentally opened a website or a document which contains that very string and could fool our script, we add a second condition for further execution - the string has to contain our chosen tag separator in foobar2000. A situation where both of these conditions are met and the string captured is still not a foobar2000 player is probably as improbable as winning the national lottery five times in a row ;)</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">playback_time_pre</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">[^-]+$</span><span class="sh">'</span><span class="p">,</span> <span class="n">foobar_title</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">playback_time</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\d\d?:\d\d</span><span class="sh">'</span><span class="p">,</span> <span class="n">playback_time_pre</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">time_played_current</span> <span class="o">=</span> <span class="nf">convert_minsec_to_sec</span><span class="p">(</span><span class="n">playback_time</span><span class="p">)</span></code></pre></figure>

<p>As explained before, in order to compare current playback time with the last tick, we need to feed time to a function that does just that. For that, we first extract the part of the string which contains playback time and then extract it from that line.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">time_played_current</span> <span class="o">&lt;</span> <span class="n">time_played_past</span><span class="p">:</span>
	<span class="n">csv_stripe</span> <span class="o">=</span> <span class="nf">foobar_title_to_csv_stripe</span><span class="p">(</span><span class="n">foobar_title</span><span class="p">)</span>
	<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">csv_file_location</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
		<span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">csv_stripe</span><span class="si">}</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>

<p>Making changes to a scrobble file is guarded behind a condition that the currently played file plays for fewer seconds than our last stored state.</p>

<p>When the condition is met, we use the function that converts the foobar2000 title to a final CSV-ready stripe (line). After that, we append that stripe to our file whose location is stored in <em>csv_file_location</em>.</p>

<p>The program cycle then needs two more actions to complete.</p>

<p>First, the variable <em>time_played_past</em> needs to get the value of <em>time_played_current</em>. In other words, our variable to which we will compare the next playback state needs to be updated.</p>

<p>Finally, we order the script to sleep for 3 seconds. The amount of time which is best depends on the habits of a particular user. One person changes tracks 20 times per minute, another presses play after adding a big playlist and never tinkers with playback until the program is shut down. The value must be chosen depending on your habits.</p>

<h2 id="final-word">Final word</h2>

<p>By following this guide, you’ve gained the tools to create a custom local audio scrobbler for Windows, empowering you to maintain full control over your music collection and playback data. This setup ensures your scrobbles are logged accurately and reliably, without dependency on external services. As you continue to enjoy your personalized music experience, feel free to tweak and expand the script to better suit your needs. Thank you for reading, and happy scrobbling!</p>

<p>Below is the code for the entire script. If you don’t know how to make the script run permanently in the background in Windows, <a href="/2022/task-scheduler-guide.html">here</a> is an article that guides you through the process.</p>

<h2 id="code-for-the-entire-script">Code for the entire script</h2>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pygetwindow</span> <span class="k">as</span> <span class="n">gw</span><span class="p">,</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">time</span> <span class="kn">import</span> <span class="n">sleep</span>


<span class="k">def</span> <span class="nf">get_window_title_contains</span><span class="p">(</span><span class="n">partial_title</span><span class="p">):</span>
	<span class="n">windows</span> <span class="o">=</span> <span class="n">gw</span><span class="p">.</span><span class="nf">getAllTitles</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">windows</span><span class="p">:</span>
		<span class="k">if</span> <span class="n">partial_title</span> <span class="ow">in</span> <span class="n">title</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
			<span class="k">return</span> <span class="n">title</span>


<span class="k">def</span> <span class="nf">convert_minsec_to_sec</span><span class="p">(</span><span class="n">minsec</span><span class="p">):</span>
	<span class="n">seconds</span> <span class="o">=</span> <span class="n">minsec</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>
	<span class="n">minutes</span> <span class="o">=</span> <span class="n">minsec</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">]</span>
	<span class="n">seconds</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">seconds</span><span class="p">)</span>
	<span class="n">minutes</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">minutes</span><span class="p">)</span>
	<span class="n">seconds_full</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="n">minutes</span> <span class="o">+</span> <span class="n">seconds</span>
	<span class="k">return</span> <span class="n">seconds_full</span>


<span class="k">def</span> <span class="nf">foobar_title_to_csv_stripe</span><span class="p">(</span><span class="n">foobar_title</span><span class="p">):</span>
	<span class="n">csv_ready</span> <span class="o">=</span> <span class="n">foobar_title</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s"> -.- </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">;</span><span class="sh">'</span><span class="p">)</span>
	<span class="n">current_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
	<span class="n">formatted_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%Y.%m.%d;%H:%M;</span><span class="sh">'</span><span class="p">)</span>
	<span class="n">stripe_pre</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">formatted_time</span><span class="si">}{</span><span class="n">csv_ready</span><span class="si">}</span><span class="sh">'</span><span class="p">[:</span><span class="o">-</span><span class="mi">14</span><span class="p">]</span>
	<span class="n">unwanted_string_tail</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">;\d?\d:\d\d$</span><span class="sh">"</span><span class="p">,</span> <span class="n">stripe_pre</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
	<span class="n">stripe</span> <span class="o">=</span> <span class="n">stripe_pre</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">unwanted_string_tail</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">stripe</span>



<span class="n">csv_file_location</span> 	<span class="o">=</span> <span class="sh">'</span><span class="s">d:/doc/scrobbles/2024.csv</span><span class="sh">'</span>
<span class="n">time_played_current</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">time_played_past</span> 	<span class="o">=</span> <span class="mi">9999</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
	<span class="n">foobar_title</span> <span class="o">=</span> <span class="nf">get_window_title_contains</span><span class="p">(</span><span class="sh">'</span><span class="s"> [foobar2000]</span><span class="sh">'</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">foobar_title</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">-.-</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">foobar_title</span><span class="p">:</span>
		<span class="n">playback_time_pre</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">[^-]+$</span><span class="sh">'</span><span class="p">,</span> <span class="n">foobar_title</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
		<span class="n">playback_time</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\d\d?:\d\d</span><span class="sh">'</span><span class="p">,</span> <span class="n">playback_time_pre</span><span class="p">).</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
		<span class="n">time_played_current</span> <span class="o">=</span> <span class="nf">convert_minsec_to_sec</span><span class="p">(</span><span class="n">playback_time</span><span class="p">)</span>

		<span class="k">if</span> <span class="n">time_played_current</span> <span class="o">&lt;</span> <span class="n">time_played_past</span><span class="p">:</span>
			<span class="n">csv_stripe</span> <span class="o">=</span> <span class="nf">foobar_title_to_csv_stripe</span><span class="p">(</span><span class="n">foobar_title</span><span class="p">)</span>
			<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">csv_file_location</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
				<span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">csv_stripe</span><span class="si">}</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>

		<span class="n">time_played_past</span> <span class="o">=</span> <span class="n">time_played_current</span>
	<span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span></code></pre></figure>]]></content><author><name>Chris</name></author><category term="audio" /><category term="python" /><summary type="html"><![CDATA[Writing a local Windows audio scrobbler]]></summary></entry><entry><title type="html">How to Run Python Scripts in the Background</title><link href="http://localhost:4000/2023/how-to-run-python-scripts-in-the-background.html" rel="alternate" type="text/html" title="How to Run Python Scripts in the Background" /><published>2023-04-11T14:21:01+02:00</published><updated>2023-04-11T14:21:01+02:00</updated><id>http://localhost:4000/2023/how-to-run-python-scripts-in-the-background</id><content type="html" xml:base="http://localhost:4000/2023/how-to-run-python-scripts-in-the-background.html"><![CDATA[<h1 id="how-to-run-python-scripts-in-the-background">How to Run Python Scripts in the Background</h1>

<div class="intro">
In today's digital landscape, Python scripts serve as indispensable tools for automating tasks, whether they operate visibly or discreetly in the background. While interactive scripts thrive on real-time feedback and user interaction, background scripts operate silently, handling tasks such as data updates, file management, and more without constant oversight. This guide delves into the realm of running Python scripts quietly in the background using Task Scheduler, offering a streamlined approach to efficiency and automation. By harnessing these tools and techniques, users can optimize workflows and focus on higher-level tasks, enhancing productivity in both personal and professional settings.
</div>

<p>There are two type of system scripts.</p>

<ol>
  <li>
    <p><strong>Interactive Scripts</strong>: These are scripts that we run with a program or terminal window open. For these scripts, we often want detailed output so we can closely monitor what the script is achieving and ensure it encounters no obstacles.</p>
  </li>
  <li>
    <p><strong>Background Scripts</strong>: These are silent partners, running in the background and performing minor tasks quietly, such as periodic data downloading, database updating, headline sniffing, file maintenance, etc.</p>
  </li>
</ol>

<p>For the latter, having a window open the entire time for something that is just supposed to work quietly is a waste of visual space. We want it to be as detached and absent as possible.</p>

<p>Below, I will show a simple way to set up just that. The example will be a Python script run through Task Scheduler.</p>

<h2 id="basics">Basics</h2>

<p>To run scripts “silently”, we need a few things things:</p>

<h3 id="--python">- Python</h3>

<p>Download the latest version from the <a href="https://www.python.org/downloads/" target="_blank">official website</a>.</p>

<h3 id="--virtual-environment">- Virtual Environment</h3>

<p>Although it’s not required, using a virtual environment is a very important habit. Virtual environments are self-contained environments that have a specific version of Python and a specific set of modules installed, tailored for one particular job.</p>

<p>If we install all the modules to the default system version of Python, the module list might grow exponentially, slowing down Python software execution. Additionally, we might encounter compatibility issues. If something happens to the core system Python, it could cause a system-wide meltdown.</p>

<p>To maintain order, simplicity, ease of access, and stability, it’s best to install a virtual environment for every different task or group of tasks our programs will be performing.</p>

<p><strong>venv</strong>, a virtual library for Python, comes with Python itself, so there is no need to install it separately.</p>

<ul>
  <li>Open a terminal (cmd or PowerShell) and navigate to the directory where you want to store your virtual environments. Choose a location that is convenient and logical.</li>
  <li>In the terminal, run: <em>python -m venv</em> followed by the name you want to give to the virtual environment. For example: <em>python -m venv mybackup</em>.</li>
  <li>To use the virtual environment, you need to activate it. When you create an environment using venv, a folder with that name is created, containing a <em>Scripts</em> folder, which contains an activate file. To start the script, run the command: <em>source path/to/venv/myvenvname/Scripts/activate</em> where myvenvname is the name of your virtual environment. Alternatively, you can navigate to the venv’s <em>Scripts</em> folder and run <em>source activate</em>.</li>
  <li>Once the virtual environment is activated, install all the modules required by the script you want to run in Task Scheduler. Open your script file(s) and review all the imports. Some of them are built-in (installed with Python), while others need to be downloaded externally. Download the external modules with the command <em>pip install</em> followed by the module name.</li>
</ul>

<p>Once you are finished, you can exit the virtual environment by typing <em>exit</em> in the console window. Don’t worry - once everything is set up, you won’t have to manually enter the virtual environment for Task Scheduler to execute it.</p>

<h3 id="--pyw-python-file">- <em>.pyw</em> Python file</h3>

<p>Python files can be saved with two file extensions: <em>.py</em> and <em>.pyw</em>. The latter, <em>‘w’</em> stands for <em>‘Windows’</em>.</p>

<p>The code within the file gets executed the same way. The difference is that the extra <em>‘w’</em> tells Windows that the script is intended to run in the graphical interface, i.e., without a terminal window present during execution.</p>

<h3 id="--task-scheduler">- Task Scheduler</h3>

<p>Ideally, background scripts initiate on predefined triggers or run whenever the system is on, without the need to start them manually each time.</p>

<p>Task Scheduler is a refined piece of software included with Microsoft Windows, specifically designed to run tasks according to various criteria.</p>

<p>I will skip the detailed explanation and go straight to the point. However, if you need a detailed guide on its features and settings, <a href="/2022/task-scheduler-guide.html" target="_blank">here is a link</a> to a Task Scheduler guide.</p>

<h2 id="create-a-script-task-in-task-scheduler">Create a script task in Task Scheduler</h2>

<ul>
  <li>Make sure that the Python script you are adding has a <em>.pyw</em> extension instead of <em>.py</em>.</li>
  <li>Open Task Scheduler by pressing <em>Start</em> and typing the initial letters of <em>task scheduler</em> until auto-complete suggests it.</li>
  <li>Select a <em>Create Task</em> action.</li>
  <li>In the <em>General</em> tab, give your task a name. Choose something short but descriptive. The name is required, and while the description is optional, it’s worth adding if you have many tasks or similar tasks.</li>
  <li>In the <em>Triggers</em> tab, add one or more triggers. For example, if you want the script to run at 10 AM every day, select <em>On a schedule</em> and specify the hour.</li>
  <li>In <em>Actions</em> tab, specify the tasks to be executed. Click the <em>New</em> button.
<img src="http://localhost:4000/assets/img/articles/how-to-run-python-scripts-in-the-background/pyw.png" alt="Task Scheduler: adding a pyw script" /></li>
  <li>Click <em>Browse</em>, navigate to the location of your virtual environment where the script is supposed to run. In the directory containing the activate file, there are <em>.exe</em> files for different Python executables. Locate <em>pythonw.exe</em> and select it. Be careful not to select <em>python.exe</em> by accident. The <em>‘w’</em> letter at the end is important, as we need to run a <em>‘.pyw’</em> file with <em>‘pythonw.exe’</em> for the script to run entirely in the background.</li>
  <li>In the Add arguments (optional) field, paste the full path to the script you want to run.</li>
</ul>

<p>There are many other settings worth checking out to tailor the script to your needs, but the defaults are sensible and will generally not prevent the script from working.</p>

<p>It is generally worth manually starting the task after adding it to verify that it’s working before leaving Task Scheduler.</p>

<h2 id="final-word">Final word</h2>

<p>Mastering the art of running Python scripts silently in the background empowers users to automate routine tasks seamlessly. With Task Scheduler and a virtual environment, you can ensure scripts execute efficiently without cluttering your workspace. If you encounter any challenges or seek further customization, feel free to explore additional Task Scheduler features or reach out for assistance. Happy scripting!</p>]]></content><author><name>Chris</name></author><category term="python" /><category term="windows" /><summary type="html"><![CDATA[How to Run Python Scripts in the Background]]></summary></entry><entry><title type="html">Task Scheduler Guide</title><link href="http://localhost:4000/2022/task-scheduler-guide.html" rel="alternate" type="text/html" title="Task Scheduler Guide" /><published>2022-04-25T14:14:20+02:00</published><updated>2022-04-25T14:14:20+02:00</updated><id>http://localhost:4000/2022/task-scheduler-guide</id><content type="html" xml:base="http://localhost:4000/2022/task-scheduler-guide.html"><![CDATA[<h1 id="task-scheduler-guide">Task Scheduler Guide</h1>

<div class="intro">
Task Scheduler is an essential tool for managing automated tasks in Windows, with a rich history and functionality that parallels Unix’s Cron. In this comprehensive guide, we'll explore how to utilize Task Scheduler to streamline your workflow, from setting up tasks to fine-tuning their execution parameters. You'll discover how to navigate the interface, create and configure tasks, and leverage advanced features for optimal performance and reliability. Whether you're a freelancer guiding clients through task setup or a power user seeking to automate complex processes, this guide will equip you with the knowledge to make the most of Task Scheduler’s capabilities.
</div>

<p>A decent tool since <em>Vista</em> but already existing as early as <em>Win 3.11</em>, Task Scheduler is an ireplaceable tool to manage system scripts.</p>

<p>As the name implies, it is the Windows version of Unix’s <em>Cron</em>. The software manages events that are executed at specified times. It’s essentially a calendar of tasks.</p>

<p>Setting up tasks is more cumbersome compared to Cron due to everything being done through a graphical interface. Instead of quickly writing a one-line rule with a path to a script, we have to navigate through multiple clicks.</p>

<p>On the other hand, Task Scheduler is more user-friendly. Unlike Cron, which requires explanation, a task in Task Scheduler can be created with minimal knowledge and research.</p>

<p>This makes it particularly useful in freelancing, where a client whose knowledge of PCs is limited can be easily guided through the setup process without becoming frustrated.</p>

<p>Another advantage is reliability: in Cron, scripts can sometimes run unpredictably, and troubleshooting may require technical knowledge and can be cumbersome. Task Scheduler is generally more reliable in this regard.</p>

<h2 id="starting-task-scheduler">Starting Task Scheduler</h2>

<p>The easiest way to start Task Scheduler is by pressing the Start button on your keyboard and then typing ‘task scheduler’. You don’t have to type the whole phrase, as the autofill will suggest it. Just press <em>Enter</em> when it appears.</p>

<p>For those who prefer keyboard shortcuts or want a more direct approach, you can press <em>Win+r</em> and type <em>‘taskschd.sc’</em> in the Run dialog that appears.</p>

<p>The initial screen might look like this, or somewhat similar, depending on which menu panels you have enabled or disabled:</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd1.png" alt="Task Scheduler main tab" /></p>

<p>Right off the bat, you can see some limitations in the interface. Sorting tasks by column used to work on Windows 10, but it may not function now (at least in my experience). There’s also no search functionality.</p>

<p>This means locating a single task when you have hundreds can be extremely problematic. After focusing on the table, you can type the name of the task you’re looking for and it will keep focusing first direct match, but if there are many tasks with near-identical names, it’s not very helpful.</p>

<h2 id="adding-a-new-task">Adding a new task</h2>

<p>There are two procedures for creating tasks:</p>

<ol>
  <li>
    <p><strong>Create Basic Task</strong> - A streamlined wizard with limited options that sets sensible defaults. This is designed for inexperienced users to avoid confusion.</p>
  </li>
  <li>
    <p><strong>Create Task</strong> - The full version with all options visible, taking slightly longer to set up but offering more control.</p>
  </li>
</ol>

<p>In this article, we’ll cover option 2, as it only takes about one to five minutes to fully grasp and some of the extra options are useful.</p>

<p>In the right <em>Actions</em> panel, click <em>Create Task</em>. Alternatively, in the top program menu, click <em>Action</em> and select <em>Create Task</em> from the dropdown menu.</p>

<h2 id="tab-general">Tab: General</h2>

<p>A window similar to the one pictured below will appear. It has 5 tabs, defaulting to the first one, <em>General</em>. Here are explanations for all the options. The one marked with an exclamation mark (!) is required to set up before continuing.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd2.png" alt="Task Scheduler: Create Task: General" /></p>

<ul>
  <li>
    <p><strong>Name</strong>(!): Name of the task. Choose something concise yet descriptive enough that you’ll immediately know what the task does when you encounter it a year from now. Using unique initial letters makes it easier to find by typing.</p>
  </li>
  <li>
    <p><strong>Description</strong>: Self-explanatory. Here you can be as verbose as you like. Taking a moment to write a detailed description is worthwhile, especially if you plan to have many tasks.</p>
  </li>
  <li>
    <p><strong>When running the task, use the following user account</strong>: If the account which will be running the script is different from the currently logged-in account, you need to change it here.</p>
  </li>
  <li>
    <p><strong>Run only when user is logged in / Run whether user is logged in or not</strong>: Scripts that require user interaction or access to variables created during the log-in process need the first option. The second option hides the task execution and is more suitable for non-interactive background tasks. If unsure, leave it at the default first option.</p>
  </li>
  <li>
    <p><strong>Run with highest privileges</strong>: Enable this only if you know you need it. Otherwise, leave it off, as giving highest privileges to a script can cause significant problems if the script misbehaves.</p>
  </li>
  <li>
    <p><strong>Hidden</strong>: This option hides the task from the list of tasks. Use with caution and only when necessary for privacy or security reasons.</p>
  </li>
  <li>
    <p><strong>Configure for</strong>: Increases compatibility in some edge cases. It’s usually safe to leave this at the default setting.</p>
  </li>
</ul>

<h2 id="tab-triggers">Tab: Triggers</h2>

<p>This is where Task Scheduler really shines and makes Crontab look like child’s toy.</p>

<p>Triggers are conditions which, when met, start the task. In most cases, tasks will have one trigger, but there are instances where multiple triggers are needed. It’s much more convenient to define multiple triggers than multiple tasks, each with a different trigger.</p>

<p>The most commonly used trigger, which is also the default, is <em>On the schedule</em>. We choose a specific date, or a daily/weekly/monthly cycle for the task to be executed.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd3.png" alt="Task Scheduler: Create Task: Triggers" /></p>

<p>Often, we want the script to run whenever the computer is on, without concerning ourselves with dates and cycles. We can choose to start the task at logon or startup.</p>

<p>A fantastic feature for power users and unique cases is <em>On an event</em>. For example, when a specific event is logged in the <em>Windows Event Viewer</em>, it could trigger our script to start.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd4.png" alt="Task Scheduler: Create Task: New trigger" /></p>

<p>Workstation lock/unlock triggers are very useful in work environments when we want certain scripts to run only when the workstation is in use.</p>

<p>As you can see, the possibilities with Task Scheduler Triggers are vast. Microsoft has made many questionable decisions in the directions its applications are going, but here they’ve done an excellent job.</p>

<p>Let’s discuss some of the <strong>Advanced settings</strong>:</p>

<ul>
  <li>
    <p><strong>Delay task for up to X</strong>: When the trigger registers, instead of starting the task immediately, Task Scheduler waits a specified amount of time before starting.</p>
  </li>
  <li>
    <p><strong>Repeat task every X for the duration of Y</strong>: When we want to start a script at system logon and then run every hour, choose <em>Begin a task: On a schedule</em> and select <em>Repeat task every: 1 hour</em>. If you want it to repeat indefinitely, make sure to select <em>For a duration of: Indefinitely</em>.</p>
  </li>
  <li>
    <p><strong>Stop Task if it runs longer than X</strong>: Very useful for poorly written scripts which tend to fail and then hang indefinitely, especially if they consume resources while doing so. When dealing with such problematic code, we can limit it with settings like 30 minutes. Note that you’re not limited to options in the drop-down list; you can enter custom values.</p>
  </li>
  <li>
    <p><strong>Expire</strong>: Another useful feature. We can have a script collecting data until publication of that data, at which point we want the script to be disabled until we start another data gathering session later in the year. It’s convenient to set up the task expiration date instead of having to remember to disable it manually.</p>
  </li>
  <li>
    <p><strong>Enabled</strong>: The most self-explanatory of all the options, but potentially troublesome. It can be clicked not only by clicking on the box or the name, but the clickable area extends to half of the entire container window width. This makes it possible to accidentally click and disable it, potentially causing confusion about why the task isn’t working.</p>
  </li>
</ul>

<h2 id="tab-actions">Tab: Actions</h2>

<p>After going through various options and scheduling settings for our task, we now create the actual task that will be running.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd5.png" alt="Task Scheduler: Create Task: Actions" /></p>

<p>Here, everything is straightforward. We click on <em>Browse</em> and provide the location of the program to run. If we want to start a program with additional arguments, we specify them in the second field.</p>

<p>The third box, <em>Start in (optional)</em> provides a directory where the program will start. This will be the context directory, useful for example when the program uses relative paths and we want it to have access to files in that particular directory.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd6.png" alt="Task Scheduler: Create Task: New action" /></p>

<p>Another use is for log file generation. Starting in a specific directory could mean the script generates logs in that directory, which might be desired behavior.</p>

<h2 id="tab-conditions">Tab: Conditions</h2>

<p>Conditions are an extra set of <em>if</em> statements guarding the task. If any condition is not met, the task is prevented from running.</p>

<p>All of the options are self-explanatory, so there’s no need to expand on any of them.</p>

<p><img src="http://localhost:4000/assets/img/articles/task-scheduler-guide/taskschd7.png" alt="Task Scheduler: Create Task: Conditions" /></p>

<p>One particularly useful feature is <em>“Start only if the following network connection is available”</em>. This is especially useful for users in countries where high-speed internet access is not yet common. A PC could be connected to low-speed internet, and for a few hours of the day, high-speed internet could become available.</p>

<p>Task Scheduler could wait for the better option and only then execute the script to enable faster downloading of content. Another use case is waiting for a connection where there is no monthly download limit.</p>

<h2 id="tab-settings">Tab: Settings</h2>

<ul>
  <li>
    <p><strong>Allow task to be run on demand</strong>: Enables manual execution of the task at any time via the Task Scheduler interface or command line. This is useful for creating extra backup runs of the script or when the script is still in a testing stage and we need to manually execute it to verify what is not working and why.</p>
  </li>
  <li>
    <p><strong>Run task as soon as possible after a scheduled start is missed</strong>: A crucial setting for all scripts handling backup. For example, if we schedule a backup at 10 AM but the system is off at that time, ticking this setting ensures that when the PC starts later that day, Task Scheduler recognizes that the backup script did not run and will execute it.</p>
  </li>
  <li>
    <p><strong>If the task fails, restart every [X] minutes, up to [Y] times</strong>: Enable this setting for network-related tasks, such as scripts that upload files to a server. If the task fails due to a temporary network issue, it will retry a few times before giving up, increasing the chances of success.</p>
  </li>
  <li>
    <p><strong>Stop the task if it runs longer than [X] hours and [Y] minutes</strong>: Enable this setting for scripts that perform resource-intensive calculations or data processing. If the script has a bug causing it to run indefinitely, this setting will prevent it from consuming system resources indefinitely.</p>
  </li>
  <li>
    <p><strong>If the running task does not end when requested, force it to stop</strong>: Enable this setting for tasks that interact with external systems, such as automated tests or data transfers. If these tasks hang due to unresponsive external systems, forcing them to stop prevents system resources from being tied up.</p>
  </li>
  <li>
    <p><strong>If the task is already running, then the following rule applies</strong>: A very useful set of conditions. When a script is scheduled to run every hour and the old instance hangs and consumes resources, these can stack up. If it doesn’t quit as expected and continues its work, after an hour we could have two scripts doing the same thing which, if they manipulate the same data simultaneously, can have catastrophic results. This setting provides safety nets for these and many other conditions.</p>
  </li>
</ul>

<h2 id="tab-history">Tab: History</h2>

<p>Finally, we have the task execution history. It is disabled by default, but enabling it won’t significantly impact system performance. It won’t create logs that consume much disk space, won’t cause excessive disk I/O, and won’t consume much processing power.</p>

<p>The exception is when we have a very large number of tasks that run frequently, but these are very rare cases.</p>

<p>In general, when we are working on a complex system task whose development will take a while and it’s going to be executed many times during each working session, it is useful to enable history for easy execution status tracking.</p>

<h2 id="last-run-result">Last Run Result</h2>

<p>One poorly designed aspect of Task Scheduler is the execution codes, visible in the main task table.</p>

<p>Each time a task is executed, there is a code describing the status of that execution. Some of these statuses have both a hexadecimal code (0xnum) and a description, from which we can determine if it worked well and if not, why. However, other times we just receive the code and have to manually search the web to understand what happened with our task.</p>

<p>Below is a list of all the common execution codes and what they mean:</p>
<ul>
  <li><strong>0x0: Success</strong> - The task completed successfully without errors.</li>
  <li><strong>0x1: Incorrect function call</strong> - This often indicates a generic error with the function call within the script or program.</li>
  <li><strong>0x2: File not found</strong> - The script or program could not find a file it needs to execute.</li>
  <li><strong>0x41300: Task is ready to run at its next scheduled time</strong> - The task is correctly configured and will run at the next scheduled time.</li>
  <li><strong>0x41301: Task is currently running</strong> - The task is actively running.</li>
  <li><strong>0x41302: Task is disabled</strong> - The task needs to be manually enabled to run.</li>
  <li><strong>0x41303: Task has not yet run</strong> - The task has never been executed since it was created or last updated.</li>
  <li><strong>Task is running interactively as a different user</strong> - The task is running interactively under a different user account.</li>
  <li><strong>0x41305: Task is not running</strong> - The task is not currently running.</li>
  <li><strong>0x80070005: Access is denied</strong> - The task does not have the necessary permissions to execute.</li>
  <li><strong>0x8007010B: Directory name is invalid</strong> - The task points to a directory that is invalid or does not exist.</li>
  <li><strong>0xC000013A: The application was terminated by Ctrl+C</strong> - The task was terminated by the user manually.</li>
</ul>

<h2 id="final-word">Final word</h2>

<p>Task Scheduler is a powerful and versatile tool that can significantly enhance your Windows experience. Whether you’re a casual user looking to automate simple tasks or a power user seeking to orchestrate complex workflows, Task Scheduler offers the flexibility and features to meet your needs. By mastering its various settings and options, you can create sophisticated automated processes that save time, improve system efficiency, and ensure critical tasks are executed reliably.</p>

<p>However, like any powerful tool, Task Scheduler requires careful use and management. It’s important to regularly review and maintain your scheduled tasks, ensuring they’re still necessary and functioning as intended. Pay attention to error codes and execution history to troubleshoot any issues that arise. With proper setup and monitoring, Task Scheduler can be an invaluable asset in your Windows toolkit, helping you streamline your work and make the most of your computer’s capabilities.</p>]]></content><author><name>Chris</name></author><category term="scheduler" /><category term="windows" /><summary type="html"><![CDATA[Task Scheduler Guide]]></summary></entry><entry><title type="html">How to Run Scripts with Mouse Gestures</title><link href="http://localhost:4000/2021/how-to-run-scripts-with-mouse-gestures.html" rel="alternate" type="text/html" title="How to Run Scripts with Mouse Gestures" /><published>2021-08-22T10:00:01+02:00</published><updated>2021-08-22T10:00:01+02:00</updated><id>http://localhost:4000/2021/how-to-run-scripts-with-mouse-gestures</id><content type="html" xml:base="http://localhost:4000/2021/how-to-run-scripts-with-mouse-gestures.html"><![CDATA[<h1 id="how-to-run-scripts-with-mouse-gestures">How to Run Scripts with Mouse Gestures</h1>

<div class="intro">
In the realm of computer interfaces, mouse gestures remain an underappreciated gem, offering a swift and intuitive way to execute commands without navigating menus or remembering keyboard shortcuts. This article delves into the world of mouse gestures, exploring their potential to revolutionize how we interact with our computers. We'll focus on using StrokesPlus, a powerful yet user-friendly tool, to harness the full capabilities of mouse gestures. By the end of this guide, you'll learn how to set up custom gestures to run scripts, automate tasks, and streamline your workflow, unlocking a new dimension of efficiency in your daily computing experience.
</div>

<h2 id="mouse-gestures-an-underutilized-feature">Mouse Gestures: An Underutilized Feature</h2>

<p>Mouse gestures have always been an underutilized feature. Similar to Virtual Reality helmets, they are undeniably useful and have the potential to become universal. However, unlike VR, which has seen substantial investment, mouse gestures remain relatively neglected. Even today, internet browser manufacturers hesitate to implement them in the base code, let alone provide a system-wide solution. Notably, Apple’s Hot Corners is an example of something similar being implemented, but it is not a comprehensive solution.</p>

<p>Casual users benefit the most from mouse gestures since they eliminate the need to remember text commands or navigate through menus. Instead, users can simply press a button and perform a hand movement. This feature can also be incredibly beneficial for programmers and IT administrators. Gone are the days when most tasks were performed in a terminal window, making the mouse redundant. Nowadays, many tasks are executed in graphical interfaces.</p>

<p>A particularly powerful and simple action is starting a script with a mouse gesture. In just half a second and with our eyes closed, we could perform tasks such as:</p>

<ul>
  <li><strong>Preparing the work environment</strong>: Starting multiple apps, resizing windows, and closing unnecessary processes.</li>
  <li><strong>Clipboard management</strong>: Displaying a list of recent clipboard items for quick pasting.</li>
  <li><strong>Screenshot tool</strong>: Capturing a screenshot and saving it to a predefined folder.</li>
  <li><strong>New email shortcut</strong>: Starting an email client and opening a new message window with the recipient pre-filled.</li>
  <li><strong>VPN connect/disconnect</strong>: Quickly connecting to or disconnecting from a VPN.</li>
  <li><strong>Task automation</strong>: Running a predefined automation script, such as moving files to a backup location.</li>
  <li><strong>Lock screen</strong>: Immediately locking the computer screen for security.</li>
</ul>

<p>And much more. Imagination is the limit, as scripts can do almost anything, and modern Windows operating systems are very receptive.</p>

<p>All we need for these tasks is a desktop mouse gesture program.</p>

<h2 id="about-strokesplus">About StrokesPlus</h2>

<p><img src="http://localhost:4000/assets/img/articles/how-to-run-scripts-with-mouse-gestures/strokes-plus.png" alt="StrokesPlus main window" /></p>

<p>Since mouse gestures are not very popular, there aren’t many apps offering this functionality. Those that do often have slow development cycles. The app I recommend is <strong>StrokesPlus</strong>. Although it hasn’t received an update in almost a year, it remains a complete and bug-free software.</p>

<p>It’s best to download it directly from its website at <a href="https://www.strokesplus.net/Downloads" target="_blank">strokesplus.net</a>.</p>

<p>The program is simple yet powerful. It offers keyboard modifiers for every action, not just a single optional modifier for all actions. For instance, a right button swipe to the right could perform one action, a left button swipe to the right could do another, and a shift-right button swipe to the right could do yet another.</p>

<p>This dramatically increases the number of actions you can assign, unlike most other mouse gesture programs that force users to come up with complex and difficult-to-execute gestures. The more complex the gesture, the higher the chance of executing an incorrect action.</p>

<p>StrokesPlus uses Lua as a scripting language, allowing for a wide range of actions. The most basic use is generating keystrokes, such as <em>ctrl+w</em>, frequently used to close the current tab in programs. But it offers much more! Lua can interact with Windows APIs, enabling file operations, window management, process management, and system volume control.</p>

<p>Thanks to AI tools like ChatGPT, you don’t even need to know Lua or delve into Windows API commands to program these tasks. Simply ask, and you shall receive.</p>

<h2 id="setting-up-a-mouse-gesture-to-start-a-python-script">Setting Up a Mouse Gesture to Start a Python Script</h2>

<ul>
  <li>
    <p><strong>Install StrokesPlus</strong>: After installation, restart your PC if necessary. Run the application. Its default state is minimized, with only a tray icon visible. Open the application window by clicking the tray icon.</p>
  </li>
  <li>
    <p><strong>Create a new action</strong>: In the StrokesPlus.net interface, go to the Actions tab. Click the New Action button.</p>
  </li>
  <li>
    <p><strong>Name the action</strong>: Give your action a descriptive name, such as My First System-Breaking Python Script.</p>
  </li>
  <li>
    <p><strong>Assign a gesture</strong>: Assign a mouse gesture to this action by drawing in the gesture box.</p>
  </li>
  <li>
    <p><strong>Add Lua script</strong>: In the Lua Script tab for the action, add the following Lua code to run your Python script through the virtual environment’s Python interpreter:</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">acShellExecute<span class="o">(</span><span class="s2">"C:</span><span class="se">\\</span><span class="s2">path</span><span class="se">\\</span><span class="s2">to</span><span class="se">\\</span><span class="s2">myenv</span><span class="se">\\</span><span class="s2">Scripts</span><span class="se">\\</span><span class="s2">python.exe"</span>, <span class="s2">"C:</span><span class="se">\\</span><span class="s2">path</span><span class="se">\\</span><span class="s2">to</span><span class="se">\\</span><span class="s2">your</span><span class="se">\\</span><span class="s2">script.py"</span>, <span class="s2">""</span>, <span class="s2">""</span>, <span class="s2">"SW_SHOWNORMAL"</span><span class="o">)</span></code></pre></figure>

<p>Make sure to replace <em>“C:\path\to\myenv\Scripts\python.exe”</em> with the actual path to the Python executable in your virtual environment, and <em>“C:\path\to\your\script.py”</em> with the actual path to your Python script.</p>

<h2 id="troubleshooting-tips">Troubleshooting tips</h2>

<ul>
  <li><strong>Permissions</strong>: Ensure your Python script has the necessary permissions to execute.</li>
  <li><strong>Paths</strong>: Double-check all paths in your Lua script for accuracy.</li>
  <li><strong>Virtual Environment Activation</strong>: Ensure you are using the correct path to the virtual environment’s Python executable.</li>
</ul>

<p>Keep in mind that if you already use mouse gestures in browsers, they may conflict with system-wide StrokesPlus gestures. It’s best to disable the browser add-ons. Additionally, while playing games, you might accidentally trigger mouse gestures. If those gestures correspond to in-game keyboard shortcuts, you could disrupt your gaming session. It’s best to either close StrokesPlus before playing, or add the game to <em>Ignore List</em> in StrokesPlus</p>

<h2 id="extra-advice">Extra advice</h2>

<p>It is not recommended to bind critical scripts to mouse gestures. Always consider the consequences of accidentally starting a script, whether by you or someone else using your computer. Assume it will happen one day, and if the negative consequences are too high, avoid creating that gesture.</p>

<p>Ideal candidate scripts are those that:</p>

<ul>
  <li>Do not require any fixing or require minimal fixing if executed accidentally.</li>
  <li>Are repetitive and need to be done frequently.</li>
  <li>Were previously executed manually in a cumbersome and inconvenient way.</li>
</ul>

<h2 id="final-word">Final word</h2>

<p>Mouse gestures represent a powerful tool for enhancing productivity and simplifying complex tasks on your computer. By leveraging StrokesPlus and the techniques outlined in this article, you can create a personalized set of gestures that cater to your specific needs, whether you’re a programmer, IT administrator, or casual user. The ability to execute scripts, launch applications, and perform system operations with a simple mouse movement can significantly streamline your workflow and save valuable time.</p>

<p>However, it’s crucial to approach the implementation of mouse gestures with thoughtfulness and caution. Consider the potential consequences of accidental activation, especially for critical scripts or actions. Focus on creating gestures for repetitive, non-destructive tasks that genuinely enhance your efficiency. With careful planning and judicious use, mouse gestures can become an indispensable part of your computing toolkit, offering a glimpse into the intuitive, gesture-driven interfaces that may shape our digital future.</p>]]></content><author><name>Chris</name></author><category term="interface" /><category term="windows" /><summary type="html"><![CDATA[How to Run Scripts with Mouse Gestures]]></summary></entry><entry><title type="html">Guide to responsive design tools in CSS</title><link href="http://localhost:4000/2021/guide-to-responsive-design-tools-in-css.html" rel="alternate" type="text/html" title="Guide to responsive design tools in CSS" /><published>2021-02-01T10:13:28+01:00</published><updated>2021-02-01T10:13:28+01:00</updated><id>http://localhost:4000/2021/guide-to-responsive-design-tools-in-css</id><content type="html" xml:base="http://localhost:4000/2021/guide-to-responsive-design-tools-in-css.html"><![CDATA[<h1 id="guide-to-responsive-design-tools-in-css">Guide to responsive design tools in CSS</h1>

<div class="intro">
The evolution of web browsing devices has dramatically reshaped the landscape of web design, pushing CSS to adapt and innovate. This article explores the journey of responsive design tools in CSS, from the early days of fixed layouts to the sophisticated techniques available today. We'll delve into the challenges faced by web designers as screen sizes diversified, and examine how CSS has evolved to meet these challenges. From the game-changing introduction of media queries to the powerful flexbox and grid layouts, we'll uncover the tools that have revolutionized how we create adaptive, responsive websites for the modern web.
</div>

<h2 id="how-it-started">How it started</h2>

<p>Before smartphones became popular, almost entire web browsing traffic was on PCs.</p>

<p>Despite only one device needing to be taken in consideration when designing a website, web designers still didn’t have an easy task on their hands. Some people had a 800x600 screen resolution, others 1024x768, others 1280x1024. Different viewports needed to be addressed and, as opposed to today, there weren’t exactly that many tools at our disposals to properly do so.</p>

<p>One of the early heavily abused properties for the task was min/max-height/width, both present in CSS 1.0 specification. It allowed to create different limitations to items. This helped in adjusting page elements to different screens.</p>

<p>While helping to <em>“constrain”</em> items, it was obviously limited. Ok, the element can be <em>this</em> big, but then what?</p>

<h2 id="css-21-additions">CSS 2.1 additions</h2>

<p>2010 was probably the year when smartphones entered internet browsing market big time. In that year, <em>3.8%</em> traffic was mobile. Those devices that now everyone <a href="https://blabbermouth.net/news/max-cavalera-why-i-dont-have-a-cell-phone">except Max Cavalera</a> has in a pocket were beginning to serve more and more extra roles outside of plain talking. And the most important of its all new emerging roles was browsing the web.</p>

<p>In the year 2011, <em>8.5%</em> web traffic was mobile. More than double the amount in one year! One year later it went up to <em>13.2%</em>, a <em>55%</em> increase. A team behind CSS knew well where the market is going and that it’s their responsibility to addressed the needs related to this market expansion.</p>

<p>One of the most notable additions in CSS 2.1 was the support for <strong>media queries</strong>. Media queries allowed developers to apply different styles based on the characteristics of the device or viewport, such as screen resolution, orientation, and aspect ratio. This feature enabled the creation of responsive layouts that could adapt to different screen sizes and orientations.</p>

<p>While being a game changer, using media queries still produced many problems.</p>

<p>First one that comes to mind is that in order to accomodate all more and less popular screen sizes, plenty of rules has to be written. It can take quite some time to set everything up. And when making some major redisigning, often all of that has to be changed! So the code is annoying to both navigate and change.</p>

<p>Second problem is that designing based on media queries often leaves annoying blindspots. When resizing browser on a high resolution desktop, entire design <em>“snaps”</em> once crossing a defined threshold (for examle <em>min-width</em> of <em>1024px</em>).</p>

<p>One motivation for such setup could be that at 1024px the font size/image size/side panel size etc. becomes so unbearable to watch that it has to be changed to a new now-good-looking arrangement. But what if someone has high desktop resolution and browser occupying only part of the screen?</p>

<p>That person’s browser can then have the width right below the min-width property, right where the design is the ugliest, right before the change for the better. And so it could be a visitor left in a state of disgust and leaving the site ASAP before even beginning to read the content.</p>

<p>We can mitigate that by creating more rules, more trigger points. This makes the blindspots less ugly, but also requires more time for code creation and maintenance.</p>

<p>After CSS 2.0, the number of different types of developments that needed to be done became so big that <strong>World Wide Web Consortium</strong> started splitting more and more of the work. By the time of CSS 2.1 birth in 2001, a small portion of modules was already going their own separate ways, despite the standard still having a formal version.</p>

<h2 id="css-30-additions">CSS 3.0 additions</h2>

<p>In 2005, the CSS3 module publishing process began, with individual modules like Selectors, Color, Values and Units, etc. being developed and released independently.</p>

<p>Version 3.0 brought some game-changing additions to responsive design. The two biggest ones were <strong>Flexbox</strong> and <strong>Grid</strong>.</p>

<p>Flexbox enabled super-easy creation of 1D page elements while CSS Grid 2D structures. Both made many tasks trivial and targetted one of the biggest problems of html development: endless mazes of <em>&lt;div&gt;</em> tags in code.</p>

<p>With Flexbox, splitting a horizontal space among few different objects was as simple as appending to each object’s CSS properties <em>‘flex:’</em> followed by a number. And those proportions were of course scaling infinitely in both ways.</p>

<p>Grid, on the other hand, became the go-to tool for creating a more complex designs of big news outlets, magazinet and the likes, where multiple different cubes can be stacked next to each other in different proportions with very little code to manage it.</p>

<p>The Units section of W3C also introduced units frequently used in responsive design - <em>vw</em> (short of <em>viewport width</em>), <em>vh</em> (<em>viewport height</em>), and <em>rem</em> (<em>root em</em>).</p>

<p>Of the three, viewport width is the most important one in the context of this article. Having viewport width as direct reference point for size of any element on page is really a game changer.</p>

<p>CSS 3.0 introduced a plenthora of various functions, some of which very potent in responsive design. One notable example is <strong>calc()</strong> function. On paper, it’s just a calculator, so what could it possibly offer when creating websites that need so scale perfectly?</p>

<p>Adding fixed value to a relative one can make sure we can get infinitely scaling <em>vw</em> element if need be while also setting up a base provided by fixed value. Relative unit doesn’t amount to much in tiny viewport, but fixed value covers for that shortcoming. And so we have a solid size for small displays while the relative one keeps us safe no matter how large viewport gets.</p>

<p>Sometimes the “growth curve” is not to our liking (the object gets big too fast or too slow as the screen gets wider etc.). Adjusting this curve with extra parameters using calc() function can help there. It can be time consuming to find two or three values which scale perfectly across the whole spectrum, but at the end it allows perfect scaling across the whole viewport spectrum, impossible to achieve with single unit, whichever we may choose for the task.</p>

<p><em>CSS Values and Units Module Level 4</em> standard introduced multiple wonderful tools, like the <strong>min()</strong> and <strong>max()</strong> functions, which seek to replace or compliment media queries.</p>

<p><em>min()</em> allows to choose the smallest number from the list of different numbers. When giving the function vw, percentage values etc. often we don’t consider the fact that someone out there might be watching the webpage in resolution multiple times bigger than we think our max users are having.</p>

<p>The website (or some of its elements like text) need to stop growing at some point in order not to start looking grotesque. min() enables us to set things up using relative units, with a sanity value (like <em>3000px</em>) to make sure that the element never stretches more than that.</p>

<p>As the function looks for the smallest parameter, when our responsive design element reaches 3001px, it becomes bigger than 3000px and so no longer selected as parameter.</p>

<p><em>max()</em> does exactly the same thing in opposite direction, as the name implies, and often serves to capture the limit of the shrinking instead of stretching.</p>

<p>The <em>clamp()</em> function takes a more sophisticated approach to controlling values. Instead of managing extremes on just one side of the spectrum, it covers both sides.</p>

<p>It takes three parameters: a minimum value, the value itself, and a maximum value. The middle value is relative, and the minimum and maximum values provide limits that the function enforces. If the value falls below the minimum, it is clamped to the minimum value. If it falls above the maximum, it is clamped to the maximum value.</p>

<p>Another useful addition to CSS is the <picture> tag. It acts as a container for multiple images. Instead of resizing one large image across all viewports and penalizing users with smaller screens by making them download a larger-than-necessary image, different versions of the image can be selected based on conditions similar to media queries.</picture></p>

<p>This allows the appropriate image to be loaded depending on the screen size.</p>

<h2 id="final-word">Final word</h2>

<p>The progression of responsive design tools in CSS reflects the rapid evolution of web browsing technology and user expectations. From the basic min/max properties to sophisticated functions like clamp(), CSS has continuously adapted to provide developers with powerful, flexible tools for creating truly responsive designs. These advancements have not only simplified the process of building adaptive layouts but have also enabled more nuanced control over how content scales and adapts across a wide range of devices and screen sizes.</p>

<p>As we look to the future, it’s clear that responsive design will continue to be a crucial aspect of web development. The tools and techniques discussed in this article provide a solid foundation for creating flexible, user-friendly websites. However, as new devices and browsing contexts emerge, we can expect CSS to evolve further, introducing even more innovative solutions to meet the challenges of an ever-changing digital landscape. Staying informed about these developments and mastering the use of responsive design tools will be essential for any web developer aiming to create modern, accessible, and visually appealing websites.</p>]]></content><author><name>Chris</name></author><category term="css" /><category term="html" /><summary type="html"><![CDATA[Guide to responsive design tools in CSS]]></summary></entry><entry><title type="html">JPG compression guide for Linux</title><link href="http://localhost:4000/2020/jpg-compression-guide-for-linux.html" rel="alternate" type="text/html" title="JPG compression guide for Linux" /><published>2020-09-16T08:01:21+02:00</published><updated>2020-09-16T08:01:21+02:00</updated><id>http://localhost:4000/2020/jpg-compression-guide-for-linux</id><content type="html" xml:base="http://localhost:4000/2020/jpg-compression-guide-for-linux.html"><![CDATA[<h1 id="jpg-compression-guide-for-linux">JPG compression guide for Linux</h1>

<div class="intro">
In the digital age, efficient image compression is crucial for managing storage space and optimizing web performance. This guide delves into the intricacies of JPG compression on Linux systems, offering valuable insights for both novice users and seasoned developers. We'll explore the fundamentals of compression levels, the impact of recompression on image quality, and how to effectively use command-line tools like ImageMagick and jpegoptim. Whether you're managing a high-traffic website or simply organizing your personal photo collection, understanding these techniques will help you balance image quality and file size for optimal results.
</div>

<h2 id="basics">Basics</h2>

<p>Almost all jpg files out there are compressed to some extent. The compression is on a scale of 1 to 100, 1 being most compressed (do not ever go that low!), 100 meaning no compression.</p>

<p>Recompression reduces image quality. Exactly how much it varies. With some images, recompressing 100 times with the same compression level will barely decrease image quality, but other times even a single recompression can introduce ugly artifacts.</p>

<p>That’s why recompression should only be done when changing the compression level by a considerable amount, and hopefully as rarely as possible.</p>

<p>Another important thing is to recompress only to lower levels. Recompressing to a higher level means the image will take more hard disk space, but at best it will still only look as good as it did before the last compression.</p>

<p>Image quality can’t be magically improved by changing to a higher compression level, just like details of a completely blurred image can’t be made sharp just by increasing image sharpness—the sharp contours and exact object colors just aren’t there behind the image, waiting to be exposed.</p>

<p>Recompression to the same quality is almost always a bad idea. If the previous compressor did a terrible job, the damage is done already. We can only go lower on the scale and test if it’s possible to save space while doing a minimum of extra damage.</p>

<p>Usually, the only good reason to recompress is to reduce image quality so it can take less space on the hard disk, thus it can take less space, load faster, and eat less bandwidth. If you don’t have these concerns, don’t compress. You can always compress later, but when image details are lost, they are lost forever.</p>

<h2 id="finding-out-compression-level-of-an-image">Finding out compression level of an image</h2>

<p>You can check the level of jpg file compression by installing Image Magick (more about it soon) and then running this shell command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">identify <span class="nt">-format</span> <span class="s1">'%Q'</span> filename.jpg</code></pre></figure>

<p>Replace filename with the name you want to inspect.</p>

<p>It is extremely useful for scripting purposes to be able to check for image compression level.</p>

<p>Let’s say we run a forum website with many users who upload many images. We don’t want those images to be just left there on the server.</p>

<p>Going down from 100 compression (no compression) to just 95 rarely produces visible image problems, but it can drastically reduce size!</p>

<p>So, in whichever programming language we’re running on a server, we can write a script to get each incoming image’s compression level and if it’s above a desired number, recompress it with jpegoptim to whichever we want.</p>

<p>You can also check compression level in graphical programs. Look for ‘image properties’ or something similar in your program’s drop-down menus. Some graphic editors ask for compression level each time we save a new image or even re-save an already existing one.</p>

<p>By default, the slider in some of those programs shows the program default for the file extensions, but in others, it shows current image compression. You have to find out for yourself how your program behaves.</p>

<h2 id="saving-uncompressed-image-compressing-with-another-tool">Saving uncompressed image, compressing with another tool</h2>

<p>We’ve established that we want to compress as few times as possible and select the best tool for the job. Let’s go through an example to illustrate that approach.</p>

<p>In another post, I presented a script that (in short) captures screen content to a file. It uses the import tool, which is part of Image Magick.</p>

<p>If you don’t understand part of its command, check the linked article where it is explained in detail. Here, we will use it in concert with another tool.</p>

<p>There are other command line programs whose only purpose is to compress images. For the jpg format, probably the most popular one right now is jpegoptim — and that’s what we’re going with.</p>

<p>If we really want the best image quality for the size, we need to use a specialized tool like that, instead of assuming that the program that produced the image has a good algorithm. It might, it might not. We will use it in this short tutorial.</p>

<p>Jpegoptim probably doesn’t ship with any Linux distro, so you have to install it manually. First, try from your distro’s official repository.</p>

<p>Now, if we order import to save the screen capture to a .jpg file, it will compress it to 85, which is the program default.</p>

<p>But since jpegoptim will do a better job optimizing its quality, we don’t want import to compress it at all. The first compression might seriously worsen image quality.</p>

<p>We can change import’s compression level to any other percentage we want by appending the import command with ‘-quality 95’ (or any other number). We need to order it not to compress. We do that by adding ‘-quality 100’ to the command.</p>

<p>Jpegoptim generally has two modes. The first, default one, optimizes the image, leaving its compression level unchanged. It does not recompress (so no quality loss), but only improves compression to squeeze more out of it.</p>

<p>The second we invoke with the ‘-m’ option. Executing this command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">jpegoptim <span class="nt">-m70</span> filename.jpg</code></pre></figure>

<p>will recompress filename.jpg with 70% compression, using its own optimized algorithm.</p>

<p>Let’s take a real-life use case. We have a monitor that displays some sort of statistics. Every hour, we need to capture the content of that monitor to a file for reference.</p>

<p>We only want to have the latest reference image, so we want it to always write to the same file, overwriting its content every hour.</p>

<p>Depending on some conditions, we might want to rename the file by hand and move it to another folder with images. And since in that folder files will stay forever, we need to take precautions so one day this folder’s size does not become a problem. We need to compress.</p>

<p>Our Bash script file only needs to contain two lines, plus the path to the interpreter on line one:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/usr/bin/bash</span>
import <span class="nt">-window</span> root <span class="nt">-crop</span> 2560x1440+0+0 <span class="nt">-quality</span> 100 /path/to/filename.jpg
jpegoptim <span class="nt">-m90</span> /path/to/filename.jpg</code></pre></figure>

<p>Import captures our 1440p left-most monitor’s screen and saves it to an uncompressed jpg file. Jpegoptim then finishes the work by compressing it.</p>

<p>To generate that image every hour, we save that file and end its name with ‘.sh’. We then go to a command line window, start editing the current user’s crontab file with ‘crontab -e’ and paste that line into it:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">0 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span>	/path/to/our/script.sh</code></pre></figure>

<h2 id="png-instead-of-jpg">PNG instead of JPG</h2>

<p>What if we want to save to a PNG file instead? In some cases, it’s a better choice. If the image contains transparent background, it’s mandatory since PNG supports it and JPG does not.</p>

<p>Since it’s a popular format, there are many compression tools written for it as well.</p>

<p><strong>pngquant</strong> is one such tool. It is easy to install on many platforms and is even present in Ubuntu’s official repository. To save it to a PNG file, we need to do two things:</p>

<ol>
  <li>
    <p>Change the file extension from ‘<em>.jpg</em>’ to ‘<em>.png</em>’ in the line with import command.</p>
  </li>
  <li>
    <p>Replace the jpegoptim command line with this one (remember to change image paths):</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">pngquant <span class="nt">--quality</span> 90 <span class="nt">--speed</span> 1 <span class="nt">--force</span> <span class="nt">--output</span> /path/to/filename.png /path/to/filename.png</code></pre></figure>

<p>The quality setting is self-explanatory. We set speed to 1 (slowest, but gives the best results).</p>

<p>The ‘force’ option is needed here, as the default pngquant behavior is that it doesn’t overwrite images, and we order the program to save to the same file that it reads from. If we don’t specify the output file, it appends its ending to a filename, and for this example, we need to overwrite the source file.</p>

<h2 id="final-word">Final word</h2>

<p>Mastering JPG compression on Linux is a valuable skill that can significantly improve your workflow, whether you’re a web developer, system administrator, or photography enthusiast. The tools and techniques discussed in this guide provide a solid foundation for optimizing image files, balancing quality with file size to meet various needs. By understanding compression levels, utilizing specialized tools like jpegoptim, and implementing automated solutions, you can efficiently manage large collections of images while maintaining visual integrity.</p>

<p>As digital content continues to grow in importance, the ability to effectively compress images will remain crucial. Remember that compression is not just about reducing file size; it’s about finding the right balance for each specific use case. Experiment with different compression levels and tools to discover what works best for your projects. With practice and attention to detail, you’ll be able to achieve excellent results, ensuring your images look great while conserving valuable storage space and bandwidth.</p>]]></content><author><name>Chris</name></author><category term="cli" /><category term="images" /><category term="linux" /><summary type="html"><![CDATA[JPG compression guide for Linux]]></summary></entry><entry><title type="html">Converting date to ISO 8601 in Python</title><link href="http://localhost:4000/2020/converting-date-to-iso8601-in-python.html" rel="alternate" type="text/html" title="Converting date to ISO 8601 in Python" /><published>2020-09-07T11:53:01+02:00</published><updated>2020-09-07T11:53:01+02:00</updated><id>http://localhost:4000/2020/converting-date-to-iso8601-in-python</id><content type="html" xml:base="http://localhost:4000/2020/converting-date-to-iso8601-in-python.html"><![CDATA[<h1 id="converting-date-to-iso-8601-in-python">Converting date to ISO 8601 in Python</h1>

<div class="intro">
In the world of programming, dealing with dates can be a complex and error-prone task. The ISO 8601 standard offers a solution by providing a universally recognized format for representing dates and times. This article delves into the importance of using ISO 8601 for date representation and presents a comprehensive guide to converting various date formats to ISO 8601 using Python. We'll explore the challenges of date formatting, the benefits of standardization, and walk through a custom Python function designed to handle a variety of input formats. Whether you're a seasoned developer or just starting out, this guide will equip you with the knowledge to effectively manage date conversions in your Python projects.
</div>

<h2 id="why-use-iso-8601">Why use ISO 8601?</h2>

<p>No matter which area a programmer works in, he most likely has to deal with dates in some way. Even writing a basic application log benefits from stamping information with dates, so we know when a potential problem occurred, etc.</p>

<p>Unfortunately, dates are a tricky subject. They are often an extra feature that just needs to work but doesn’t. And they can fail for many reasons.</p>

<p>One of the main reasons is incompatibility between different date formats. Sometimes, the month is a word; sometimes it’s a number. The standard order of year, month, and day differs from one country to another.</p>

<p>When the month is a number and it’s 12 or lower, it can be confused with the day number, making it difficult to verify which is which. One month has 30 days, another has 31. February has 28 days… but only 3 years out of 4. All this needs to be considered when dealing with dates.</p>

<p>To alleviate the pain from some of these problems, ISO 8601 was introduced. It is an international standard, an exact way of writing date and time so that there is no confusion.</p>

<p>Having all dates in one format is important for your own projects. When dates are always written the same way, there is no need to convert anything, and they are compatible with each other for future use by default.</p>

<p>It is also important externally. When someone else needs to process them, there is no need to verify what is what or format the string to make it compatible with another company’s internal formatting standard.</p>

<p>Choosing ISO 8601 is also very convenient for the programmer. Most frameworks, modules, etc., that deal with dates use it as the default standard and force the user to first convert the input data string to ISO 8601 before further processing. Such is the case with SQLite, Pandas, Django, and many more.</p>

<p>It is always best practice to stick to one data formatting standard whenever possible. And since ISO 8601 is the most popular standard for date formatting in the world, it is most convenient to stick to it. It makes our dates most compatible with other dates “out there,” saving us from many potential headaches in the future.</p>

<h2 id="what-needs-does-this-converter-address">What needs does this converter address?</h2>

<p>Unfortunately, there is no one correct way to write a converter. It all depends on the context in which it needs to be used, and based on that, the optimal behavior can be different.</p>

<p>For example, in some cases, it is crucial that failure to convert produces an error and instantly stops the program from running to not pollute the data with pseudo-dates or empty strings which have to be addressed quickly to avoid breaking something else.</p>

<p>Other times, it is mandatory that the service continues working and errors are handled silently and gracefully. There is no right or wrong way to write it; it’s all context-dependent.</p>

<p>The converter function below behaves as follows:</p>
<ul>
  <li>Deals just with date, not date and time</li>
  <li>Does not require hint parameters to know the format, it tries to guess which is which</li>
  <li>Returns None on failure, does not break whatever’s running it</li>
  <li>When month and day are both numbers, it assumes that month is always the digit on the left side, and day on the right</li>
  <li>The year is always a four-digit number</li>
  <li>The month can be either a number, or a word</li>
  <li>A day can be either a one-digit number or a two-digit number</li>
  <li>There can be no day, but month and year both have to be present</li>
</ul>

<p>Make sure that a converter you need meets all the criteria above, or that you have fixes for when it doesn’t.</p>

<p>Below I break apart the code. If you just want the entire thing to copy-paste, click <a href="#full_code">here</a>.</p>

<h2 id="code-breakdown">Code breakdown</h2>

<blockquote>
  <p>def toiso8601(date):</p>
</blockquote>

<p>The converter is best written as a function, convenient to keep in a separate Python helper file and import as needed. It takes date, i.e., a string hopefully containing all the ingredients we need.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">def</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_as_word</span><span class="p">):</span>
		<span class="n">months_full</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">january</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">february</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">02</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">march</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">03</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">april</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">04</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">may</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">05</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">june</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">06</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">july</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">07</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">august</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">08</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">september</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">09</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">october</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">november</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">11</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">december</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">12</span><span class="sh">'</span><span class="p">}</span>
		<span class="n">months</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">jan</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">feb</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">02</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mar</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">03</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">apr</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">04</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">may</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">05</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">jun</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">06</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">jul</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">07</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">aug</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">08</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sep</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">09</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">oct</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">nov</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">11</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">dec</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">12</span><span class="sh">'</span><span class="p">}</span>
		<span class="n">month_as_word</span> <span class="o">=</span> <span class="n">month_as_word</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">month_as_word</span> <span class="ow">in</span> <span class="n">months_full</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
			<span class="n">month_final</span> <span class="o">=</span> <span class="n">months_full</span><span class="p">[</span><span class="n">month_as_word</span><span class="p">]</span>
		<span class="k">elif</span> <span class="n">month_as_word</span> <span class="ow">in</span> <span class="n">months</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
			<span class="n">month_final</span> <span class="o">=</span> <span class="n">months</span><span class="p">[</span><span class="n">month_as_word</span><span class="p">]</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date. month word unknown</span><span class="sh">'</span><span class="p">)</span>
			<span class="n">month_final</span> <span class="o">=</span> <span class="bp">None</span>
		<span class="k">return</span> <span class="n">month_final</span></code></pre></figure>

<p>First, we write a sub-function that converts the month, written as a word, to a number (still written as a string). This sequence exists twice in our code, so there is no point repeating the whole thing. Instead, we make a function of it and call it when needed.</p>

<p>There are two types of month words popular in writing dates in English. The first one is full words, the second the first 3 letters of each word. In ISO 8601, the month is a two-digit number. So we have to convert.</p>

<p>For that, we have two dictionaries, one for each type. The keys are the month-words, the values are numbers to which they convert.</p>

<p>If it feels right, you can also create one dictionary and test for the full name against the full key name or for the first three letters of the parsed string against the first three letters of each dictionary key, saving us from the need to create the second dictionary. It reduces redundancy in our code but makes the script perform worse.</p>

<p>Notice that the numbers are in quotes. They are strings, first because ‘01’, ‘02’, ‘03’ etc. are not numbers understandable by Python, and second because the entire process is taking string input and outputting another string. There is no reason to switch to any other data type at any point, as sooner or later it would have to be converted back into a string.</p>

<p>If conversion fails (i.e., the word doesn’t match the month name in either dictionary), we set month_final to None. At the end of our function, we make a condition that year, month, and day all have to be set, and only then do we generate and return the final date. Otherwise, we’d let some gibberish word posing as a month pass through to the final string.</p>

<p>There is no ISO 8601 date without a year, and setting it to some default is risky business. You could, for example, decide to go with ‘0000’. If such a year has no reason to exist in our data (let’s say we have a movie database), setting it to such would conform to the ISO 8601 standard while giving us valuable information that that particular piece of data is missing.</p>

<p>In some datasets, the data has to exist, even if our database tool of choice allows setting datetime fields to be empty. This would force us to use a solution like that.</p>

<p>Since for my use case it’s not a problem, if a four-digit number indicating the year is not found, the function informs about the problem, returns None, and that’s the end of it.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="n">year</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">\d\d\d\d</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
	<span class="k">if</span> <span class="ow">not</span> <span class="n">year</span><span class="p">:</span>
		<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date. year missing</span><span class="sh">'</span><span class="p">)</span>
		<span class="k">return</span> <span class="bp">None</span>
	<span class="n">year</span> <span class="o">=</span> <span class="n">year</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<p>The last line of that chunk of code extracts the string from a regex object. If we had done it earlier (not knowing if the regex found anything), pointing to a sometimes non-existing item would throw an error. That behavior we do not want, as it would force us to use it inside a ‘try’ clause.</p>

<p>After setting up a year variable, we now need to delete this number from the date string and only seek in that new variable. Otherwise, it would extract sub-numbers from it as potential month and day numbers.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="n">date_no_year</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
	<span class="n">month_day</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sh">'</span><span class="s">\d\d?</span><span class="sh">'</span><span class="p">,</span> <span class="n">date_no_year</span><span class="p">)</span>
	<span class="n">month_word</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">[A-Za-z]{3,}</span><span class="sh">'</span><span class="p">,</span> <span class="n">date_no_year</span><span class="p">)</span></code></pre></figure>

<p>Then, we proceed to look inside that newly cut string for the word indicating month and as many sets of digits as we can find. The combination of these two findings are the basis for our final assessments of what data we have and how to process it.</p>

<p>For that, we use the regex module’s findall and search functions. Both month and day can be single or double-width strings (hence ? by the second one, meaning “0 or 1 of it”). Month words only contain letters, and all the words in both dictionaries are of 3+ length. {3,} means “minimum 3, maximum unspecified. So equal to or higher than 3”. Just like with Python slices when we skip one side.</p>

<p>Being specific here is important. If someone surprises our converter with a peculiar date, like 1969x05x20, our function would still work and omit ‘x’ separators, as they are only of length 1. Not demanding three or more letters in a word, those x-es would be added needlessly as separate ‘month or day’ items and cause the script to fail to fulfill its duty and return None.</p>

<p>Now we get into different scenarios.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">if</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
		<span class="n">month</span> <span class="o">=</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
		<span class="n">day</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
		<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span> <span class="o">+</span> <span class="n">day</span></code></pre></figure>

<p>First is the case of month being a word (as in containing letters, not in the regex sense, where digits also qualify as word characters) and month_day search returning only one object.</p>

<p>If we have a year, some word, and some digit, it is safe to assume that that word is the month and the digit is the day. So we set up both variables, giving us a first potential complete set of year, month, and day variables.</p>

<p>The last two lines are important. ISO 8601 does not accept single-digit numbers, neither for date nor for time. If the input format is ‘Sep 1, 1995’, the day needs ‘0’ in front of 1.</p>

<p>Because strings are iterable in Python, it is very easy to check for their length, and if it’s 1 (which means the number is most likely 1-9 with no 0 in front), we add it and the day variable is complete.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">elif</span> <span class="ow">not</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
		<span class="n">month</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
		<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">01</span><span class="sh">'</span></code></pre></figure>

<p>The first alternative check is for no word indicating the month and just a single digit found. In most cases, when we only have a year and a single number, that single number is the month. Nobody writes the year and day of a month that is not specified.</p>

<p>In rare cases, this extra number means the day of the year. This converter is not equipped to deal with such a scenario, and if it is indeed what you have to deal with, you’d have to use Python’s datetime module to convert it to a final date. It is easily achievable once you know this primary tool for dealing with dates in Python.</p>

<p>In many scenarios, when the day is not found, we might want the whole date to be invalid. For my use, I still need the date, which is only used for getting approximate guesses to another object with another date (the ones with the smallest timedelta between them being paired), so a few days off are much less hurtful than not having a date at all.</p>

<p>If you want to not return any date if the day is missing, it is easy to change in this function. Because final date generation will fail if the year, month, or day is not set, all you have to do is change “day = ‘01’” to “day = None” in two places.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">elif</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">month_day</span><span class="p">:</span>
		<span class="n">month</span> <span class="o">=</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
		<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">01</span><span class="sh">'</span></code></pre></figure>

<p>Next is a straightforward case, where we have a word for the month, but no extra number that would represent the day. Here, again we blindly set the day to the first of the month.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">elif</span> <span class="ow">not</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
		<span class="n">month</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
		<span class="n">day</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
		<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span> <span class="o">+</span> <span class="n">day</span></code></pre></figure>

<p>Lack of a word representing the month and two sets of digits indicates both month and day being numbers. As mentioned in the function summary, this part assumes the month number is to the left of the day number. You can reverse this order by setting month to month_day[1] and day to month_day[0].</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">else</span><span class="p">:</span>
		<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date</span><span class="sh">'</span><span class="p">)</span>
		<span class="n">year</span> <span class="o">=</span> <span class="bp">None</span></code></pre></figure>

<p>Finally, we write what to do if all our previous conditions fail. If we got to it, this means that either of these is true:</p>
<ul>
  <li>A word representing the month was not found, and the regex was not able to fetch any numbers from the string, leaving us with no data to work with.</li>
  <li>Besides the year, there were more than two other numbers.</li>
</ul>

<p>Three digits make it impossible to assess which one is the month and which one is the day. Usually, it means that the string we got is not a date at all, or a date with some unfortunate extra luggage.</p>

<p>One way or the other, under this circumstance, it is best not to make wild guesses and instead call it quits. The print statement will inform us about the problem in the terminal window. Setting year to None will make the final condition fail, as it tests for the presence of year, month, and day. None is faulty in Python, indicating failure, and so the condition is not met.</p>

<p>The final piece of our code checks for the presence of all objects and constructs a string from them.</p>

<p>The last return is silent and applies only when that condition is not met. Every function in Python returns None, if not specified elsewhere. Here, we want to return date, but only if we have all the ingredients. If not, there are no final return instructions, which means the function will return ‘None’.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">if</span> <span class="n">year</span> <span class="ow">and</span> <span class="n">month</span> <span class="ow">and</span> <span class="n">day</span><span class="p">:</span>
		<span class="n">final_date</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">year</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">month</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">day</span><span class="si">}</span><span class="sh">'</span>
		<span class="k">return</span> <span class="n">final_date</span></code></pre></figure>

<p>In other words, the final lines could be more redundantly written this way:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="k">if</span> <span class="n">year</span> <span class="ow">and</span> <span class="n">month</span> <span class="ow">and</span> <span class="n">day</span><span class="p">:</span>
		<span class="n">final_date</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">year</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">month</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">day</span><span class="si">}</span><span class="sh">'</span>
		<span class="k">return</span> <span class="n">final_date</span>
	<span class="k">return</span> <span class="bp">None</span></code></pre></figure>

<p>First return reached instantly ends the function, and so it reaches ‘return None’ only if year, word and month are not set to anything truthy.</p>

<p>And here is the entire code:<a id="full_code"></a></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python">	<span class="kn">import</span> <span class="n">re</span>
	<span class="k">def</span> <span class="nf">toiso8601</span><span class="p">(</span><span class="n">date</span><span class="p">):</span>
		<span class="k">def</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_as_word</span><span class="p">):</span>
			<span class="n">months_full</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">january</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">february</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">02</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">march</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">03</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">april</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">04</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">may</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">05</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">june</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">06</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">july</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">07</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">august</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">08</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">september</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">09</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">october</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">november</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">11</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">december</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">12</span><span class="sh">'</span><span class="p">}</span>
			<span class="n">months</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">jan</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">01</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">feb</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">02</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mar</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">03</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">apr</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">04</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">may</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">05</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">jun</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">06</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">jul</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">07</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">aug</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">08</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sep</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">09</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">oct</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">10</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">nov</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">11</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">dec</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">12</span><span class="sh">'</span><span class="p">}</span>
			<span class="n">month_as_word</span> <span class="o">=</span> <span class="n">month_as_word</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
			<span class="k">if</span> <span class="n">month_as_word</span> <span class="ow">in</span> <span class="n">months_full</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
				<span class="n">month_final</span> <span class="o">=</span> <span class="n">months_full</span><span class="p">[</span><span class="n">month_as_word</span><span class="p">]</span>
			<span class="k">elif</span> <span class="n">month_as_word</span> <span class="ow">in</span> <span class="n">months</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
				<span class="n">month_final</span> <span class="o">=</span> <span class="n">months</span><span class="p">[</span><span class="n">month_as_word</span><span class="p">]</span>
			<span class="k">else</span><span class="p">:</span>
				<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date. month word unknown</span><span class="sh">'</span><span class="p">)</span>
				<span class="n">month_final</span> <span class="o">=</span> <span class="bp">None</span>
			<span class="k">return</span> <span class="n">month_final</span>

		<span class="n">year</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">\d\d\d\d</span><span class="sh">'</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
		<span class="k">if</span> <span class="ow">not</span> <span class="n">year</span><span class="p">:</span>
			<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date. year missing</span><span class="sh">'</span><span class="p">)</span>
			<span class="k">return</span> <span class="bp">None</span>
		<span class="n">year</span> <span class="o">=</span> <span class="n">year</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

		<span class="n">date_no_year</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>

		<span class="n">month_day</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sh">'</span><span class="s">\d\d?</span><span class="sh">'</span><span class="p">,</span> <span class="n">date_no_year</span><span class="p">)</span>
		<span class="n">month_word</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">[A-Za-z]{3,}</span><span class="sh">'</span><span class="p">,</span> <span class="n">date_no_year</span><span class="p">)</span>

		<span class="k">if</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">month</span> <span class="o">=</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
			<span class="n">day</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
			<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
				<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span> <span class="o">+</span> <span class="n">day</span>
		<span class="k">elif</span> <span class="ow">not</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
			<span class="n">month</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
			<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">01</span><span class="sh">'</span>
		<span class="k">elif</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">month_day</span><span class="p">:</span>
			<span class="n">month</span> <span class="o">=</span> <span class="nf">month_to_digit</span><span class="p">(</span><span class="n">month_word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
			<span class="n">day</span> <span class="o">=</span> <span class="sh">'</span><span class="s">01</span><span class="sh">'</span>
		<span class="k">elif</span> <span class="ow">not</span> <span class="n">month_word</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">month_day</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
			<span class="n">month</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
			<span class="n">day</span> <span class="o">=</span> <span class="n">month_day</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
		<span class="k">else</span><span class="p">:</span>
			<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">ERROR: not a valid date</span><span class="sh">'</span><span class="p">)</span>
			<span class="n">year</span> <span class="o">=</span> <span class="bp">None</span>

		<span class="k">if</span> <span class="n">year</span> <span class="ow">and</span> <span class="n">month</span> <span class="ow">and</span> <span class="n">day</span><span class="p">:</span>
			<span class="n">final_date</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">year</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">month</span><span class="si">}</span><span class="s">-</span><span class="si">{</span><span class="n">day</span><span class="si">}</span><span class="sh">'</span>
			<span class="k">return</span> <span class="n">final_date</span></code></pre></figure>

<h2 id="final-word">Final word</h2>

<p>The ISO 8601 date format is a powerful tool for standardizing date representation across systems and applications. The Python function presented in this article offers a flexible solution for converting various date formats to ISO 8601, addressing common challenges and edge cases. By implementing this converter, you can enhance the consistency and reliability of date handling in your projects, reducing errors and improving interoperability with other systems.</p>

<p>As with any code implementation, it’s important to thoroughly test the converter with your specific use cases and adapt it as needed. Remember that date conversion can be a complex task, and edge cases may arise depending on your data sources. Continuously refine your approach based on real-world usage, and consider integrating additional error handling or logging as required by your project. With careful implementation and ongoing maintenance, this ISO 8601 converter can become a valuable asset in your Python toolkit, streamlining date management across your applications.</p>]]></content><author><name>Chris</name></author><category term="date" /><category term="iso8601" /><category term="python" /><summary type="html"><![CDATA[Converting date to ISO 8601 in Python]]></summary></entry><entry><title type="html">CMUS music player review</title><link href="http://localhost:4000/2020/cmus-music-player-review.html" rel="alternate" type="text/html" title="CMUS music player review" /><published>2020-09-01T11:03:28+02:00</published><updated>2020-09-01T11:03:28+02:00</updated><id>http://localhost:4000/2020/cmus-music-player-review</id><content type="html" xml:base="http://localhost:4000/2020/cmus-music-player-review.html"><![CDATA[<h1 id="cmus-music-player-review">CMUS music player review</h1>

<div class="intro">
In the world of music players, CMUS stands out as a popular terminal-based option for Unix operating systems. This comprehensive review delves into the features, strengths, and limitations of CMUS version 2.7.0, as experienced on Linux Mint 19. We'll explore its unique approach to music management through various views, examine its performance with large libraries, and discuss its keyboard-centric interface. Whether you're a command-line enthusiast or simply curious about alternative music players, this review will provide valuable insights into CMUS's capabilities and help you determine if it's the right choice for your audio needs.
</div>

<p><img src="http://localhost:4000/assets/img/articles/cmus-music-player-review/cmus1.png" alt="CMUS library view" /></p>

<p>CMUS is probably the most popular terminal-based music player for Unix operating systems. The competition is almost non-existent, and even from that small pool, some applications do not look to meet the same needs CMUS addresses (some basically play a single specified track and that’s it).</p>

<p>Despite being very satisfied with my previous player, DeadBeef, I was eager to look for something that could be fully controlled from within by keyboard, and thus free up various system-wide (and Ranger-wide) playback shortcuts with one application shortcut, and give all the commands from inside the program inside the terminal window. Which, of course, has its advantages over graphical interface.</p>

<p>DeadBeef already comes chock-full of keyboard shortcuts, including specialized ones that you’ll struggle to find in most music players, like remove currently played file from disk, or look it up on last.fm. Spoiled for choice, I was coming with high expectations.</p>

<h2 id="views">Views</h2>

<p>By pressing numbers 1-7, we switch between different tabs, which in CMUS are called ‘views’. First one is tree view (aka. library), second is sorted library, third is playlist, fourth is queue. We get three options for three different scenarios, depending on how long do we plan on keeping the file on the list:</p>
<ul>
  <li>library is for long-term  additions that is supposed to reflect all the music we have on disk (or at least the part of it which we want to have quick access to)</li>
  <li>playlist is for ‘current’ use</li>
  <li>queue is a list that takes priority - whatever is added there is going to be played immediately after the currently played track and only after</li>
</ul>

<p>Majority of users will spend majority of time either in library view, or playlist view, depending of course on which they find more convenient.</p>

<p>The librarians will find separate playback queue extremely useful. Since in library, an order of tracks is predetermined on loading, it is very convenient to press whatever key we have bound to the win-add-q command to add it to music queue. This way, we use library to play entire albums and in between we add to queue whatever music we scavenge outside the current album’s directory.</p>

<p>On the other hand, using queue for playlistians is not as useful. In playlist, we set whatever order of tracks played ourselves. And so queue view doesn’t address the natural limitations of library view. We end up splitting our playlist into two for no reason.</p>

<p>A better solution for people who use playlist as their primary queuing tool would be to have an extra ‘insert into playlist after currently played track” command for cmus-remote. Unfortunately, you’d struggle to find it in almost all music players out there and it’s a very handy feature that would completely remove any need to use queue view for most playlist users.</p>

<p>The version 2.7.0, which I installed from official repository, is missing an ability to set the default view on program startup. As a playlist user, I have to manually focus the player and press ‘3’ on each system startup to switch from an empty library window to playlist view.</p>

<p><img src="http://localhost:4000/assets/img/articles/cmus-music-player-review/cmus2.png" alt="CMUS playlist view" /></p>

<p>An auto-detect feature would be nice as well - if playlist is populated, but library is empty, start with playlist view. If both are empty, but queue contains tracks, focus queue view on startup.</p>

<p>An auto-switch to view when adding to it would also solve this problem, but is missing too. (edit: in version 2.8.0, there is a new cmus command ‘start_view’, which probably solves the problem)</p>

<h2 id="speed">Speed</h2>

<p>One of the reasons why someone might want to switch to a terminal-based application is speed. Perhaps the user has a very old laptop and wants to make it usable, but the modern bulky applications slow it down too much.</p>

<p>With music players for people with large music libraries on their hard drives, this is very relevant. Many programs perform well with single playlists and up-to-medium-size libraries, but once the going gets tough, they can start forever and crush often, searching is extremely slow etc.</p>

<p>A program that is displayed in a terminal emulator window does not necessarily have to be fast (Kakoune being a good example), but most of the time switching to a text interface helps to increase system performance on old computers.</p>

<p>Here, CMUS delivers. It can handle ridiculously large playlists with ease. Searching works like a breeze, too. If performance is your primary concern, switching to CMUS is definitely worth considering.</p>

<h2 id="key-bindings">Key bindings</h2>

<p>Just like so many other terminal applications, CMUS is somewhat inspired by VIM when it comes to navigation. You can move up and downwith home row keys, quit the program with ‘:q’.</p>

<p>It is possible to move selected track up or down, switch views, increase/decrease volume, pause/unpause, control playback, mark tracks for operations, execute shell commands and more.</p>

<p>Together with options, keybindings reside in a config file. Conveniently, this file is editable from inside the program as one of views. You can reach it by pressing ‘7’. Lines are highlighted same as tracks are in other views. We roll down or up to reach the line we want to edit and press enter. A colon followed by the command to change set to current value is displayed at the bottom, enabling us to edit.</p>

<p>The operation needs to be finished by pressing enter. That means if we screw up, we have to correct, because whatever we accept with enter will stay in config.</p>

<p>The program checks for validity of input only for options. If it gets the value that doesn’t exist, it reverts to last correct setting. If we edit a boolean field and we insert non-bolean value, whatever that is, it will display an error and then set the option’s value to false, since we just fed it something that is not allowed, which boolean translates to false. It doesn’t matter if it was true or false before.</p>

<p>When binding keys to commands, there is no check. Any gibberish will be accepted and the error will show only after pressing the bound key.</p>

<h2 id="string-formatting">String formatting</h2>

<p>CMUS offers surprising flexibility in what is displayed in each field in each view (and in program title, which is very important for some applications).</p>

<p>It gives access to many tag variables and lets the user format them in any way he sees fit. Here, the program is as good as they come. You’d struggle to find a music player that gives you more freedom to shape the way tag data is displayed.</p>

<h2 id="tag-viewingediting">Tag viewing/editing</h2>

<p>And yet, it doesn’t have an option to display full tag, even just for mp3 files.</p>

<p>Tag-editing duties are usually split between two programs: tag editor for bulk operations and music player for single corrections. I see a misspelled artist name in player window, I edit this file to make a quick correction in-place.</p>

<p>No need to start another terminal session, find the directory and write full command pointing to a file just to remove one ‘d’ from the end of an artist string.</p>

<p>You could argue that perhaps the user should leave tag editing duties to his tag editor, but that would be sacrificing convenience for ideology. And it’s a poor argument, the file tag is read and displayed by the program already. Whatever tags are read by the player are then potentially scrobbled. It’s not a separate case.</p>

<p>But there is no argument for not letting the user view the tag in full. This is really a basic, elemental feature that, just like equaliser, everybody takes for granted in a music player. I doubt many people, when researching a potential change of their music software, checks for the presence of the two, instead taking it for granted.</p>

<p>Notice that there is a a plugin for editing tags, just like there is for playing a random track. How good it is, I don’t know. Even if they are great, this functionality needs to be integrated into the base software.</p>

<h2 id="file-browsing">File browsing</h2>

<p>Ranger offers too much convenience with file management to delegate some of it to CMUS’ file browser. For me, it’s most convenient to select either single track, multiple tracks, or a folder and then order CMUS to either play or enqueue it (append it to the bottom of current playlist).</p>

<p>People who operate this way will find file browser useless, and in CMUS that browser is a first-class citizen, by default available by pressing ‘5’ on keyboard. Built browser will always have its limitations compared to a piece of software that is dedicated to just this task. Same for people who navigate their hard drives directly in command line, spoiled for endless customization possibilities.</p>

<p>Of course, it’s not a problem in any way, as it doesn’t take any unnecessary space and the access to it can be unbound. Whoever likes using it has the option to use it. And some internal file pointer had to be developed anyway.</p>

<h2 id="issuing-commands-from-outside-cmus">Issuing commands from outside CMUS</h2>

<p>Here’s where things get complicated. Every time CMUS starts, a tool named cmus-remote starts as well. It enables us to control playback, volume control and few other things through a socket, from outside the program. This way, we can, for example, configure custom wireless remote to jump between tracks on a playlist without the need to do it on keyboard.</p>

<p>List of commands is short, and they are stripped in functionality compared to how other players react to particular commands.</p>

<p>For example, the convention is that using the equivalent of ‘cmus-remote filename.mp3’ (directly giving the program a file to work with) does all these:</p>
<ul>
  <li>stops current playback</li>
  <li>clears current playlist</li>
  <li>adds the pointed file</li>
  <li>focuses it</li>
  <li>starts playback</li>
</ul>

<p>In CMUS, this command just adds it to the bottom of whatever place we point to. (library, playlist or queue). It does not automatically switch, nor start playback. Whether switching 5-step convenient shortcut for a simple enqueue as default is a good choice, it is of course a matter of preferences. But the above is default in most applications for a reason. Most people prefer it that way.</p>

<p>Most CMUS commands refuse to offer anything extra. ‘–next’ doesn’t switch to next file and begin playback, it just switches to next file. This enables, for example, hopping 5 positions down without hearing the beginning of each track. But it is a very mild inconvenience to which people are used to and comes at a cost in other contexts.</p>

<p>Good design choice was to make ‘–next’ loop playlist. If we are at the last position in the playlist and give that command, it will start from the beginning. It saves us from traversing the entire playlist, or having a separate command to ‘go to top’.</p>

<p>I may be scanning an album for a good track I remember from youth. And so I have to issue –next command followed by –play command. Not this track. Another –next, another –play.</p>

<p>Most ‘nexts’ will most likely be the cases of “don’t want this, play me the next one” and here again we’re taxed with either double keystrokes for that common use case, or writing a separate shortcut/programming a separate button for it, One way, or the other, not good.</p>

<p>And things get more complicated.</p>

<p>Currently played track remains being one no matter what. If I pause playback and then clear whatever list I’m using for playback, it is somewhat logical that the paused track remains present and ready to continue playback, despite removing it from a list in which it was played. After all, we just paused it, the pointer sits somewhere between its start and end.</p>

<p><img src="http://localhost:4000/assets/img/articles/cmus-music-player-review/cmus3.png" alt="CMUS options view" /></p>

<p>But when the track is stopped and then the playlist is cleared, I am giving two commands to get rid of it, and yet when I add some new music and order a ‘–play’ command, it doesn’t start playing the first track from the freshly added ones. Instead, it starts the last played one from the beginning!</p>

<p>We are past it twice, already have a new batch ready for playback, but the player doesn’t want to let go of the past. Hence, instead of ‘cmus-remote –clear –play sometrack.mp3’, the command to produce behavior surely desired by majority of users has a mandatory ‘–next’. We have to use next to point to a first object from the list.</p>

<p>And since ‘next’ does not imply “and start playback”, if we want it, we have to ensure it. This litters large part of commands we’ll be issuing with ‘–play’, because if entire playlist had finished playing before we added new objects to it, the playback got stopped.</p>

<p>And in CMUS’ commands logic, if it was playing, switching tracks also continues playing. If it wasn’t, switching will not play. Switching is just switching. It doesn’t concern itself with playback status. Sounds good on paper, in practice it is a big annoyance.</p>

<p>Look at this command from DeadBeef:</p>

<blockquote>
  <p>–play-pause       Start playback if stopped, toggle pause otherwise</p>
</blockquote>

<p>Simple conditional logic and very convenient to use. In CMUS, if you say play, it plays if it isn’t already. You say stop, it stops if it’s not stopped already. You can toggle play with pause, but not with stop.</p>

<p>Another nice DeadBeef command absent in CMUS, particularly interesting for people who like to gamble, is:</p>

<blockquote>
  <p>–random           Random song in playlist</p>
</blockquote>

<p>’–seek’ is a single exception from the trend here. ‘seek +10’ will move the playback 10 seconds forward. We can seek backwards, for example with ‘seek -20’ to go twice that length in the opposite direction. A cherry on top is ‘seek 30’ (ie. without an operator in front) that enables us to jump to the 30th second of that track. A rare need for sure, but it’s always nice that we have this possibility.</p>

<p>Armed with so much flexibility, we can program a remote so that, for example, we have 3 seek options: +3s/-3s, +10s/-10s and +60s/-60s, giving us ingredients for a beefy remote.</p>

<h2 id="bugs">Bugs</h2>

<p>I did not have the opportunity to test CMUS on another machine, but on mine cmus-remote is extremely unreliable. I remotely control behavior of many programs and scripts and no software ever misbehaves, but CMUS does that all the time.</p>

<p>For some time, I thought there is something in the way program acts that I don’t understand, and so I tested various command combinations either as a single command, or in chain, but in the end everything failed. There was no reliable way to set cmus-remote for player control.</p>

<p>Ranger’s rifle.conf file contains default applications, so the file manager knows what to run when it encounters a file with a particular extension. We can set it up to do some action in CMUS, by executing ‘cmus-remote –clear –next –play – “$1”’. It clears the playlist, adds the track, switches to it and begins playback… or at least is does so some of the time.</p>

<p>Other times it adds the file, but does not switch to it and begins playback of the last-played track.</p>

<p>Because every ‘–next’ has a chance to miss bigger than even more adventurous RPG players might now want to gamble on, we can work around it by issuing the same command 4 times. I did test it 50 times and not once has it failed.</p>

<p>The problem arises when we are adding more than one file. With one, it’s not a problem since it either switches to that one file or not and ultimately it does. But with more than one, if each next succeeds, the selection travels further and further! Or at least it would, as even one ‘–next’ can move the cursor down by a random number.</p>

<p>Outside of this behavior, I haven’t encountered any other bugs, but this one alone makes the program completely unusable for me. If you decide to install it, right away go to a folder that contains multiple mp3 files, add them to playlist with ‘cmus-remote *’ and then start ordering ‘cmus-remote –next’ and see if it switches one position down each time.</p>

<p>Because if it doesn’t, well… good luck using the program ;)</p>

<h2 id="errors">Errors</h2>

<p>Errors are being displayed at the penultimate line in terminal window, by default in a dark red color (customizable, as colors of all other types of objects). Unfortunately, they don’t timeout, but stay there until we do anything inside the player window.</p>

<p>For playlist users, it is an annoyance, since they will be issuing most commands through cmus-remote and not touch terminal window directly.</p>

<p>You can play 10 albums, clear playlist 10 times, pause and unpause 100 times, and that ancient error will still be there for no reason.</p>

<h2 id="equalizer">Equalizer</h2>

<p>Again, for some reason, it’s missing! For music player, it is an absolute must. My headphones, for example, have a very bad default sound, but when tweaked in an equalizer, they can sound pretty good. Without the ability to play with frequencies, I am forced to use system-wide solutions, which I do not mind, but many people will.</p>

<p>Some of those solutions are obscure, some are hard to wrap head around, some produce artifacts and choke on sound when processor is running some taxing script.</p>

<p>PulseEffects is a very nice system set of tools (assuming someone uses PulseAudio) that contains an equalizer. Combining it with CMUS puts the user in a potentially weird space - a terminal-based music player backed by a graphical interface equalizer. Some choose terminal applications for the sake of them being terminal applications, in which case an extra graphical dependency make the switch a no-go.</p>

<p>For people willing to go this route, there may be a nasty surprise awaiting: PulseEffects fails to start as service on some distributions, requiring always having a graphical interface present to work.</p>

<h2 id="summary">Summary</h2>

<p>I had high hopes regarding CMUS, to the point of blindly switching to it from a program which, like already mentioned, I was very satisfied with. Unfortunately, its many problems and shortcomings made it impossible to use and after a week I gave up looking for solutions and went back to DeadBeef.</p>

<p>If on your machine cmus-remote commands work as intended and lack of equalizer and tag viewer/editor are irrelevant to you, then you may still want to try it out. Because outside of those issues, everything works like a charm.</p>

<p>Unfortunately, for me each one of those is a dealbreaker, and all together make CMUS unarmed for daily use.</p>]]></content><author><name>Chris</name></author><category term="audio" /><category term="cmus" /><category term="review" /><summary type="html"><![CDATA[CMUS music player review]]></summary></entry><entry><title type="html">Setting up single navigation pane in Ranger and why it’s a good idea</title><link href="http://localhost:4000/2020/setting-up-single-navigation-pane-in-ranger.html" rel="alternate" type="text/html" title="Setting up single navigation pane in Ranger and why it’s a good idea" /><published>2020-06-22T13:31:14+02:00</published><updated>2020-06-22T13:31:14+02:00</updated><id>http://localhost:4000/2020/setting-up-single-navigation-pane-in-ranger</id><content type="html" xml:base="http://localhost:4000/2020/setting-up-single-navigation-pane-in-ranger.html"><![CDATA[<h1 id="setting-up-single-navigation-pane-in-ranger-and-why-its-a-good-idea">Setting up single navigation pane in Ranger and why it’s a good idea</h1>

<div class="intro">
Navigating complex directory structures efficiently is crucial for any developer or system administrator, and Ranger, a powerful terminal-based file manager, excels at this task. In this article, I will guide you through setting up a single navigation pane in Ranger, ensuring a streamlined and focused file management experience. Whether you're new to Ranger or looking to optimize your workflow, this tutorial will provide you with the necessary steps and tips to enhance your productivity. Let's dive into configuring Ranger to suit your needs and make navigating your file system a breeze.
</div>

<p>By default, Ranger starts in a 3-pane view, which makes it unique but not very practical. Fortunately, this can be easily changed.</p>

<p><em>If you want to skip past gibberish and straight to solution, click <a href="#solution">here</a>.</em></p>

<p>For many years, I used Total Commander (the best file manager on Windows, or at least it used to be). Maximized, I had the classic two-pane design. One day, after buying my first full HD monitor (prehistoric times indeed), I opened the program and realized how much space I was losing by having that second pane. Half of my screen space, to be precise.</p>

<p>The truth is, in that classic Norton Commander design, half the screen is a glorified directory link. Yes, it can be used to compare folders or get a broader multi-directory view, which can help make sense of things.</p>

<p>But those are situational. Most of the time, one pane is important; the other just points to where to copy or move files from. It is a waste of space.</p>

<p>If reference is indeed its main purpose, the second pane might as well have a vertical split option and just hold stackable directory paths, with a pre-selected modifier and a randomly chosen key generated for each one to allow operations to/from these.</p>

<p>This would be a very good use of space and a real lifesaver when working on projects with complex directory structures. But one link taking up half of the screen estate?</p>

<p>This isn’t a problem if someone is used to having maximized applications and alt+tabbing between them. Plenty of that space will be wasted in most programs, but that won’t matter anyway since we decide to focus on one thing at a time. For many people, having multiple things at once makes them lose focus. That’s why distraction-free modes in editors are popular.</p>

<p>I often do multiple things at once and so I’d rather have them next to each other to be able to compare and rewrite code snippets, etc. Often, I have to run different scripts at once and need to see how they perform. And so every bit of space is important.</p>

<p>That’s why, after switching to Linux a few years back, I decided to look for a file manager that would just have one pane… and ended up using the one that has three!</p>

<p>In Ranger’s default view, the parent directory, which is always one keypress away, takes one-third of the space. Another shows the sub-directory. How often is that actually useful?</p>

<p>Some of the most advanced ‘navigators’ I’ve met just use the command line for their daily routines. They get zero information even about the current directory when navigating, and yet not only can they function, but they are absurdly fast with their operations.</p>

<p>Even when we actually need to scan a subfolder for the presence of a file or two, doing a recursive search will be much faster and much less eye-straining. A view of multiple directories at once is a gimmick, something that is there probably because it made the first program of its kind stand out from the crowd.</p>

<p>Since I absolutely loved Ranger from the get-go, I wasn’t going to let this spoil things. Even if there were no option to change it, I would probably stick to it still. Fortunately, this is not the case.</p>

<h2 id="editing-config-file">Editing config file</h2>

<p>Ranger stores configuration in two files: <em>rc.conf</em> (program settings, key bindings) and <em>rifle.conf</em> (file associations). We will be editing the first one.</p>

<p>You can find it in <em>~/.config/ranger</em> directory. If it’s not there, paste this command in console and run it:</p>

<blockquote>
  <p>Ranger –copy-config=all</p>
</blockquote>

<p>Now both files should be there.</p>

<p>The first setting command that interests us is:</p>
<blockquote>
  <p>set viewmode [mode]</p>
</blockquote>

<p>This command takes one of two mode arguments:</p>
<ul>
  <li>miller: the one I mentioned, showing folder’s parent and children folder on both sides</li>
  <li>multipane: multiple unrelated directory views next to each other</li>
</ul>

<p>The multipane view puts an equation mark between tabs and panes. If there are no tabs, there is one pane. Every new tab creates a new pane, splitting the available space evenly between all displayed ones.</p>

<p>Another command complements it:</p>

<blockquote>
  <p>set column_ratios 1</p>
</blockquote>

<p>It takes 0 to 3 arguments. Giving it 4 or more is not considered properly in code. Setting it up in the config file and then starting Ranger runs it in a broken state.</p>

<p>For example, feeding it ‘1,2,1’ will set the parent and child directory panes to take 50% of the total window width, while the main window in which we navigate will occupy the other 50%. Keep in mind, though, that as of now, it only works for miller mode.</p>

<p>It would be convenient to set it to something like this:</p>

<blockquote>
  <p>set column_ratios 5,1</p>
</blockquote>

<p>If <em>multipane</em> was set, this command could only accept two arguments: the first one pointing to the relative size of the currently focused tab, the other to all other unfocused ones.</p>

<p>In <em>miller</em> mode, if we only give it one value, it will just give us one column. And since the one in which we traverse directories is the only one we can’t live without, it is set to be the only one remaining in such a case.</p>

<p>Notice that both setting <em>column_ratios</em> to <em>0</em> and not writing any number at the end will also give the same result.</p>

<p>So, if someone does not ever intend to use tabs, they might just set viewmode to multipane and be done with it, but there’s no need to do that. Today we don’t use it, maybe tomorrow we will. Let’s set it to <em>miller</em> and set <em>column_ratios</em> to <em>1</em>.</p>

<p>That’s not all, though. The problem arises when we hover over a file in Ranger. It’s going to get previewed. Now, half the screen will be occupied by a file each time we encounter a previewable one. Sometimes, that’s useful, but mostly it’s distracting.</p>

<p>The solution is to disable file previews:</p>

<blockquote>
  <p>set preview_files false</p>
</blockquote>

<p><a id="solution"></a></p>
<h2 id="summary">Summary</h2>

<ol>
  <li>Check if the file <em>rc.conf</em> exists in the path: <em>~/.config/ranger/</em>. If not, paste and execute the following command: <em>ranger –copy-config=all</em>. Now the file should be there.</li>
  <li>Open it in a text editor</li>
  <li>Add the following lines inside it:
    <ul>
      <li><em>set viewmode miller</em></li>
      <li><em>set column_ratios 1</em></li>
      <li><em>set preview_files false</em></li>
    </ul>
  </li>
</ol>

<h2 id="but-why-cripple-myself-with-one-pane-when-i-can-have-more">But why cripple myself with one pane when I can have more?</h2>

<p>If removing two panes will leave the user with empty space that they do not intend to populate in any way, it might be better to leave the default 3 panes on (unless the extra ones are distracting).</p>

<p>Even for people who don’t get much use from them but are used to having them always on, it can feel like the navigation is now crippled.</p>

<p>Don’t fret, though. First of all, we have tabs. Switching between them requires a single keystroke.</p>

<p>For copying files/directories, a popular approach is to:</p>
<ul>
  <li>Change path to the destination directory</li>
  <li>Open a new tab</li>
  <li>Go to some directory</li>
  <li>Select some objects</li>
  <li>Yank/copy them</li>
  <li>Close tab</li>
  <li>Paste</li>
</ul>

<p>Or reverse it if the file source directory and not the destination directory is where we want to do the next thing.</p>

<p>It takes the same amount of keystrokes to complete as doing that operation while jumping between panes. We just jump between tabs instead of panes. We lose visibility of a reference folder the entire time but require half the program space to complete it.</p>

<p>For diff purposes, tabbing is great too. We can, for example, check some potentially modified project folder against a backup of the same content and switch between them to quickly see if there are some differences in files. As they take turns occupying the same space, it will be easier to notice differences.</p>

<p>There are better solutions for scenarios like that, but for a quick check, it is often convenient to do it this way.</p>

<p>Second, we can simplify things further. We always move legally downloaded movies to the <em>‘movie’</em> folder, legally downloaded mp3 tracks to the ‘mp3’ folder, etc. Some folders receive a high amount of traffic. Almost everyone has a routine.</p>

<p>Many people who despise file managers and people who use them have bash aliases to folder paths set to allow easy moving. In Ranger, it is also very simple to do.</p>

<p>Ranger adopted one of Vim’s greatest tools - leader keys. No need to press a modifier key (of which there are few) and control its press and release in combination with another key to trigger some operation bound to that particular shortcut. Almost any key can lead, and it doesn’t have to be kept pressed.</p>

<p>And so, we can do this:</p>

<blockquote>
  <p>map mp shell mv %s /mnt/ssd/books/programming<br />
map mn shell mv %s /mnt/files/img/nakedpersons<br />
map ma shell mv %s /mnt/files/music/ambient</p>
</blockquote>

<p>We select all the books we want to move, then press ‘mp’ and we’re done. No need to go to any folder or open any tabs. A simple two-step operation.</p>

<p>If having two directories next to each other is a necessity at some point, nothing stops us from using a terminal multiplexer. So long as we remember that two separate Ranger instances can’t pass things between them, as Ranger doesn’t start a system daemon that could move that information. Another fantastic file manager, <a href="https://github.com/jarun/nnn">nnn</a>, has that functionality.</p>

<p>The same can be done with copying or any other shell command that takes a list of files and does something to them. Such is the amazing flexibility of the command line, and as a result, of programs that allow sending some input to it for further processing, like Ranger.</p>

<p>Another fantastic tool that supercharges single-pane navigation is history. In rc.conf, we can set:</p>

<blockquote>
  <p>map h history_go -1<br />
map H history_go 1</p>
</blockquote>

<p>By default, the <em>‘h’</em> key is used for navigation in Ranger, as it is in Vim. I am using the Colemak keyboard layout, so for me this key is free, which allows for a nice mnemonic binding. You can set it to any key you have available.</p>

<p>In a default config Ranger use, going back in history will mostly go to the directory from which we came, which will be one level higher or lower in the directory structure. Moving forward will do the opposite and will, of course, only work if we already went back in history (like redo in text editors).</p>

<p>But when we have all sorts of <em>map [key(s)] cd /some/path</em> shortcuts and jump between them, those two bindings become way more powerful. And we can bookmark folders on the fly as well (<em>‘m’</em> saves the current folder to bookmarks, tilde and <em>‘`’</em> keys open a list of bookmarked folders).</p>

<h2 id="final-word">Final word</h2>

<p>Setting up a single navigation pane in Ranger is a small tweak that can significantly enhance your file management workflow. By reducing visual clutter and focusing on one pane, you can navigate directories with greater ease and efficiency. This setup not only simplifies your interaction with Ranger but also helps you stay focused on your tasks without unnecessary distractions. As you continue to customize and optimize Ranger to fit your unique needs, you’ll find that these small adjustments can lead to substantial improvements in your overall productivity.</p>

<p>Thank you for following along with this guide. If you found it helpful, I encourage you to explore more customization options within Ranger and share your experiences. Feel free to reach out if you have any questions or if you need assistance with your projects. Happy navigating!</p>]]></content><author><name>Chris</name></author><category term="filemanager" /><category term="navigation" /><category term="Ranger" /><summary type="html"><![CDATA[Setting up single navigation pane in Ranger and why it’s a good idea]]></summary></entry></feed>